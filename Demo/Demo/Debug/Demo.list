
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007db0  08007db0  00017db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008154  08008154  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008154  08008154  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008154  08008154  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001e8  08008344  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08008344  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f808  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215f  00000000  00000000  0002fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbc  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d65  00000000  00000000  00033894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001227d  00000000  00000000  0004c5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f25d  00000000  00000000  0005e876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054a4  00000000  00000000  000edad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000f2f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d94 	.word	0x08007d94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007d94 	.word	0x08007d94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <delay_1us>:
#define ADDRESS_FLASH_TEMPE 0x0800F000
#define ADDRESS_FLASH_HUMID 0x0800F004
#define ADDRESS_FLASH_FLAG  0x0800F008
/* ================= CREATE A DELAY 1us =================== */
void delay_1us(uint16_t time)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <delay_1us+0x2c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8000a9a:	bf00      	nop
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <delay_1us+0x2c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3f9      	bcc.n	8000a9c <delay_1us+0x14>
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000258 	.word	0x20000258

08000ab8 <LCD_Command>:
void LCD_Command(char cmd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	f043 030c 	orr.w	r3, r3, #12
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000af8:	f107 0208 	add.w	r2, r7, #8
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2304      	movs	r3, #4
 8000b02:	214e      	movs	r1, #78	; 0x4e
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <LCD_Command+0x5c>)
 8000b06:	f001 fd39 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000204 	.word	0x20000204

08000b18 <LCD_Data>:
void LCD_Data(char data)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f023 030f 	bic.w	r3, r3, #15
 8000b28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f043 030d 	orr.w	r3, r3, #13
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f043 0309 	orr.w	r3, r3, #9
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	f043 030d 	orr.w	r3, r3, #13
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	f043 0309 	orr.w	r3, r3, #9
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2304      	movs	r3, #4
 8000b62:	214e      	movs	r1, #78	; 0x4e
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <LCD_Data+0x5c>)
 8000b66:	f001 fd09 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000204 	.word	0x20000204

08000b78 <LCD_Init>:
void LCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_1us(50000);  // wait for >40ms
 8000b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b80:	f7ff ff82 	bl	8000a88 <delay_1us>
	LCD_Command(0x30);
 8000b84:	2030      	movs	r0, #48	; 0x30
 8000b86:	f7ff ff97 	bl	8000ab8 <LCD_Command>
	delay_1us(5000);  // wait for >4.1ms
 8000b8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b8e:	f7ff ff7b 	bl	8000a88 <delay_1us>
	LCD_Command (0x30);
 8000b92:	2030      	movs	r0, #48	; 0x30
 8000b94:	f7ff ff90 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);  // wait for >100us
 8000b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9c:	f7ff ff74 	bl	8000a88 <delay_1us>
	LCD_Command (0x30);
 8000ba0:	2030      	movs	r0, #48	; 0x30
 8000ba2:	f7ff ff89 	bl	8000ab8 <LCD_Command>
	delay_1us(10000);
 8000ba6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000baa:	f7ff ff6d 	bl	8000a88 <delay_1us>
	LCD_Command (0x20);  // 4bit mode
 8000bae:	2020      	movs	r0, #32
 8000bb0:	f7ff ff82 	bl	8000ab8 <LCD_Command>
	delay_1us(10000);
 8000bb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bb8:	f7ff ff66 	bl	8000a88 <delay_1us>

  // dislay initialisation
	LCD_Command (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bbc:	2028      	movs	r0, #40	; 0x28
 8000bbe:	f7ff ff7b 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f7ff ff5f 	bl	8000a88 <delay_1us>
	LCD_Command (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bca:	2008      	movs	r0, #8
 8000bcc:	f7ff ff74 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f7ff ff58 	bl	8000a88 <delay_1us>
	LCD_Command (0x01);  // clear display
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ff6d 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f7ff ff51 	bl	8000a88 <delay_1us>
	delay_1us(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f7ff ff4d 	bl	8000a88 <delay_1us>
	LCD_Command (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f7ff ff62 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f7ff ff46 	bl	8000a88 <delay_1us>
	LCD_Command (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	f7ff ff5b 	bl	8000ab8 <LCD_Command>

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <LCD_String>:
	LCD_Command(cmd);
	LCD_Data(data);

}
void LCD_String(char volatile *s)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	while(*s)
 8000c0e:	e008      	b.n	8000c22 <LCD_String+0x1c>
	{
		LCD_Data(*s);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff7e 	bl	8000b18 <LCD_Data>
		s++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
	while(*s)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f1      	bne.n	8000c10 <LCD_String+0xa>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <LCD_GotoXY_String>:
void LCD_GotoXY_String(uint8_t row, uint8_t col, volatile char* data)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	603a      	str	r2, [r7, #0]
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	460b      	mov	r3, r1
 8000c44:	71bb      	strb	r3, [r7, #6]
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <LCD_GotoXY_String+0x1a>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	e000      	b.n	8000c52 <LCD_GotoXY_String+0x1c>
 8000c50:	22c0      	movs	r2, #192	; 0xc0
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
	LCD_Command(cmd);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff2a 	bl	8000ab8 <LCD_Command>
	LCD_String(data);
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f7ff ffce 	bl	8000c06 <LCD_String>

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <bytestowrite>:

// Define the Page Size and number of pages
#define PAGE_SIZE 64     // in Bytes
#define PAGE_NUM  512    // number of pages
uint16_t bytestowrite(uint16_t size, uint16_t offset)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	460a      	mov	r2, r1
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	80bb      	strh	r3, [r7, #4]
	if((size+offset)<PAGE_SIZE) return size;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	88bb      	ldrh	r3, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	2b3f      	cmp	r3, #63	; 0x3f
 8000c8a:	dc01      	bgt.n	8000c90 <bytestowrite+0x1e>
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	e003      	b.n	8000c98 <bytestowrite+0x26>
	else return PAGE_SIZE - offset;
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000c96:	b29b      	uxth	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <EEPROM_Write>:
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	60ba      	str	r2, [r7, #8]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4603      	mov	r3, r0
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	81bb      	strh	r3, [r7, #12]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000cba:	2306      	movs	r3, #6
 8000cbc:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	89bb      	ldrh	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da00      	bge.n	8000cce <EEPROM_Write+0x2a>
 8000ccc:	333f      	adds	r3, #63	; 0x3f
 8000cce:	119b      	asrs	r3, r3, #6
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000cd8:	8b7a      	ldrh	r2, [r7, #26]
 8000cda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	e035      	b.n	8000d5a <EEPROM_Write+0xb6>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000cee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000d02:	89ba      	ldrh	r2, [r7, #12]
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffb2 	bl	8000c72 <bytestowrite>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	8af9      	ldrh	r1, [r7, #22]
 8000d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1e:	9202      	str	r2, [sp, #8]
 8000d20:	8aba      	ldrh	r2, [r7, #20]
 8000d22:	9201      	str	r2, [sp, #4]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2302      	movs	r3, #2
 8000d28:	460a      	mov	r2, r1
 8000d2a:	21a0      	movs	r1, #160	; 0xa0
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <EEPROM_Write+0xc8>)
 8000d2e:	f001 fd23 	bl	8002778 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000d32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d34:	3301      	adds	r3, #1
 8000d36:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	8abb      	ldrh	r3, [r7, #20]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000d44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d46:	8abb      	ldrh	r3, [r7, #20]
 8000d48:	4413      	add	r3, r2
 8000d4a:	84bb      	strh	r3, [r7, #36]	; 0x24

		delay_1us(5000);  // Write cycle delay (5ms)
 8000d4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d50:	f7ff fe9a 	bl	8000a88 <delay_1us>
	for (int i=0; i<numofpages; i++)
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	3301      	adds	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	8b3b      	ldrh	r3, [r7, #24]
 8000d5c:	6a3a      	ldr	r2, [r7, #32]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dbc5      	blt.n	8000cee <EEPROM_Write+0x4a>
	}
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000204 	.word	0x20000204

08000d70 <Int2String1>:
void Int2String1(uint16_t data, uint8_t *s)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	80fb      	strh	r3, [r7, #6]
	s[0]=data/10 +48;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <Int2String1+0x50>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
	s[1]=data%10 +48;
 8000d92:	88fa      	ldrh	r2, [r7, #6]
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <Int2String1+0x50>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	08d9      	lsrs	r1, r3, #3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	3230      	adds	r2, #48	; 0x30
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	cccccccd 	.word	0xcccccccd

08000dc4 <EEPROM_Read>:
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	60ba      	str	r2, [r7, #8]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	81fb      	strh	r3, [r7, #14]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	81bb      	strh	r3, [r7, #12]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000dda:	2306      	movs	r3, #6
 8000ddc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	89bb      	ldrh	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <EEPROM_Read+0x2a>
 8000dec:	333f      	adds	r3, #63	; 0x3f
 8000dee:	119b      	asrs	r3, r3, #6
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	4413      	add	r3, r2
 8000df6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000df8:	8b7a      	ldrh	r2, [r7, #26]
 8000dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	e031      	b.n	8000e72 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000e22:	89ba      	ldrh	r2, [r7, #12]
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff22 	bl	8000c72 <bytestowrite>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	4413      	add	r3, r2
 8000e38:	8af9      	ldrh	r1, [r7, #22]
 8000e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3e:	9202      	str	r2, [sp, #8]
 8000e40:	8aba      	ldrh	r2, [r7, #20]
 8000e42:	9201      	str	r2, [sp, #4]
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	460a      	mov	r2, r1
 8000e4a:	21a0      	movs	r1, #160	; 0xa0
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <EEPROM_Read+0xc0>)
 8000e4e:	f001 fd8d 	bl	800296c <HAL_I2C_Mem_Read>
		startPage += 1;
 8000e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e54:	3301      	adds	r3, #1
 8000e56:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	8abb      	ldrh	r3, [r7, #20]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e66:	8abb      	ldrh	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	8b3b      	ldrh	r3, [r7, #24]
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbc9      	blt.n	8000e0e <EEPROM_Read+0x4a>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000204 	.word	0x20000204

08000e88 <EEPROM_PageErase>:
void EEPROM_PageErase (uint16_t page)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b098      	sub	sp, #96	; 0x60
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000e92:	2306      	movs	r3, #6
 8000e94:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2240      	movs	r2, #64	; 0x40
 8000ea8:	21ff      	movs	r1, #255	; 0xff
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 f82f 	bl	8005f0e <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000eb0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	21a0      	movs	r1, #160	; 0xa0
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <EEPROM_PageErase+0x58>)
 8000eca:	f001 fc55 	bl	8002778 <HAL_I2C_Mem_Write>

	delay_1us(5000);  // write cycle delay
 8000ece:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ed2:	f7ff fdd9 	bl	8000a88 <delay_1us>
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	; 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000204 	.word	0x20000204

08000ee4 <Int2String>:
int Flash_ReadData(uint32_t address)
{
	return *(__IO uint16_t *)(address);
}
void Int2String(uint16_t data, volatile char *s)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	80fb      	strh	r3, [r7, #6]
	s[0] = data/10 + 48;
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <Int2String+0x50>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3330      	adds	r3, #48	; 0x30
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	701a      	strb	r2, [r3, #0]
	s[1] = data%10 + 48;
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <Int2String+0x50>)
 8000f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f0e:	08d9      	lsrs	r1, r3, #3
 8000f10:	460b      	mov	r3, r1
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	3230      	adds	r2, #48	; 0x30
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	cccccccd 	.word	0xcccccccd

08000f38 <Set_Pin_Output>:
void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
	 /*Configure GPIO pin : OUTPUT */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4619      	mov	r1, r3
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <Set_Pin_Output+0x40>)
 8000f6a:	f001 f80f 	bl	8001f8c <HAL_GPIO_Init>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
	 /*Configure GPIO pin : INPUT */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <Set_Pin_Input+0x40>)
 8000fae:	f000 ffed 	bl	8001f8c <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <DHT11_Init>:
/* ======================== DHT11 ========================== */
#define DHT11_PORT GPIOB
#define DHT11_PIN GPIO_PIN_9
void DHT11_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <DHT11_Init+0x44>)
 8000fca:	f7ff ffb5 	bl	8000f38 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <DHT11_Init+0x44>)
 8000fd6:	f001 f974 	bl	80022c2 <HAL_GPIO_WritePin>
	delay_1us(18000);
 8000fda:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fde:	f7ff fd53 	bl	8000a88 <delay_1us>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <DHT11_Init+0x44>)
 8000fea:	f001 f96a 	bl	80022c2 <HAL_GPIO_WritePin>
	delay_1us(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f7ff fd4a 	bl	8000a88 <delay_1us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DHT11_Init+0x44>)
 8000ffa:	f7ff ffbf 	bl	8000f7c <Set_Pin_Input>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010c00 	.word	0x40010c00

08001008 <DHT11_Check>:
uint8_t DHT11_Check(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
	delay_1us(40);
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f7ff fd38 	bl	8000a88 <delay_1us>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <DHT11_Check+0x5c>)
 800101e:	f001 f939 	bl	8002294 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10f      	bne.n	8001048 <DHT11_Check+0x40>
	{
		delay_1us(80);
 8001028:	2050      	movs	r0, #80	; 0x50
 800102a:	f7ff fd2d 	bl	8000a88 <delay_1us>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) response = 1;
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <DHT11_Check+0x5c>)
 8001034:	f001 f92e 	bl	8002294 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DHT11_Check+0x3c>
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <DHT11_Check+0x40>
		else response = -1;
 8001044:	23ff      	movs	r3, #255	; 0xff
 8001046:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001048:	bf00      	nop
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <DHT11_Check+0x5c>)
 8001050:	f001 f920 	bl	8002294 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f7      	bne.n	800104a <DHT11_Check+0x42>

	return response;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010c00 	.word	0x40010c00

08001068 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e03a      	b.n	80010ea <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001074:	bf00      	nop
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <DHT11_Read+0x94>)
 800107c:	f001 f90a 	bl	8002294 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f7      	beq.n	8001076 <DHT11_Read+0xe>
		delay_1us(40);   // wait for 40 us
 8001086:	2028      	movs	r0, #40	; 0x28
 8001088:	f7ff fcfe 	bl	8000a88 <delay_1us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <DHT11_Read+0x94>)
 8001092:	f001 f8ff 	bl	8002294 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10e      	bne.n	80010ba <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2201      	movs	r2, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	4013      	ands	r3, r2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	e00b      	b.n	80010d2 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	f1c3 0307 	rsb	r3, r3, #7
 80010c0:	2201      	movs	r2, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80010d2:	bf00      	nop
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <DHT11_Read+0x94>)
 80010da:	f001 f8db 	bl	8002294 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f7      	bne.n	80010d4 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d9c1      	bls.n	8001074 <DHT11_Read+0xc>
	}
	return i;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010c00 	.word	0x40010c00

08001100 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim3.Instance)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 80b5 	bne.w	8001280 <HAL_TIM_PeriodElapsedCallback+0x180>
 {
	  DHT11_Init();
 8001116:	f7ff ff53 	bl	8000fc0 <DHT11_Init>
	  check = DHT11_Check();
 800111a:	f7ff ff75 	bl	8001008 <DHT11_Check>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b5a      	ldr	r3, [pc, #360]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001124:	701a      	strb	r2, [r3, #0]
	  Humidity_byte1 = DHT11_Read();
 8001126:	f7ff ff9f 	bl	8001068 <DHT11_Read>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b58      	ldr	r3, [pc, #352]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001130:	701a      	strb	r2, [r3, #0]
	  Humidity_byte2 = DHT11_Read();
 8001132:	f7ff ff99 	bl	8001068 <DHT11_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800113c:	701a      	strb	r2, [r3, #0]
	  Temperature_byte1 = DHT11_Read();
 800113e:	f7ff ff93 	bl	8001068 <DHT11_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001148:	701a      	strb	r2, [r3, #0]
	  Temperature_byte2 = DHT11_Read();
 800114a:	f7ff ff8d 	bl	8001068 <DHT11_Read>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001154:	701a      	strb	r2, [r3, #0]
	  checksum = DHT11_Read();
 8001156:	f7ff ff87 	bl	8001068 <DHT11_Read>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001160:	701a      	strb	r2, [r3, #0]

	  humidity = Humidity_byte1;
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800116c:	801a      	strh	r2, [r3, #0]
	  temperature = Temperature_byte1;
 800116e:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001178:	801a      	strh	r2, [r3, #0]

	  Int2String(humidity, humid);
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	494a      	ldr	r1, [pc, #296]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff feae 	bl	8000ee4 <Int2String>
	  LCD_GotoXY_String(2, 7, humid);
 8001188:	4a48      	ldr	r2, [pc, #288]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800118a:	2107      	movs	r1, #7
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff fd52 	bl	8000c36 <LCD_GotoXY_String>
	  Int2String(temperature, tempe);
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4945      	ldr	r1, [pc, #276]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fea2 	bl	8000ee4 <Int2String>
	  LCD_GotoXY_String(1, 10, tempe);
 80011a0:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80011a2:	210a      	movs	r1, #10
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fd46 	bl	8000c36 <LCD_GotoXY_String>

	  Int2String1(humidity,tempe_eeprom);
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4940      	ldr	r1, [pc, #256]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fddc 	bl	8000d70 <Int2String1>
	  Int2String1(temperature,humid_eeprom);
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	493e      	ldr	r1, [pc, #248]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fdd5 	bl	8000d70 <Int2String1>
	  EEPROM_PageErase(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f7ff fe5e 	bl	8000e88 <EEPROM_PageErase>
	  EEPROM_Write(10, 0, tempe_eeprom, 2);
 80011cc:	2302      	movs	r3, #2
 80011ce:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	200a      	movs	r0, #10
 80011d4:	f7ff fd66 	bl	8000ca4 <EEPROM_Write>
	  EEPROM_Write(10, 10, humid_eeprom, 2);
 80011d8:	2302      	movs	r3, #2
 80011da:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011dc:	210a      	movs	r1, #10
 80011de:	200a      	movs	r0, #10
 80011e0:	f7ff fd60 	bl	8000ca4 <EEPROM_Write>

	  /* Convert temperature and humidity data to transmit through UART */
	  txbuffer[0] = temperature/10+48;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80011fc:	701a      	strb	r2, [r3, #0]
	  txbuffer[1] = temperature%10+48;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001206:	fba3 1302 	umull	r1, r3, r3, r2
 800120a:	08d9      	lsrs	r1, r3, #3
 800120c:	460b      	mov	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3330      	adds	r3, #48	; 0x30
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001220:	705a      	strb	r2, [r3, #1]
	  txbuffer[2] = '/';
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001224:	222f      	movs	r2, #47	; 0x2f
 8001226:	709a      	strb	r2, [r3, #2]
	  txbuffer[3] = humidity/10+48;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	b29b      	uxth	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3330      	adds	r3, #48	; 0x30
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001240:	70da      	strb	r2, [r3, #3]
	  txbuffer[4] = humidity%10+48;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800124a:	fba3 1302 	umull	r1, r3, r3, r2
 800124e:	08d9      	lsrs	r1, r3, #3
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3330      	adds	r3, #48	; 0x30
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001264:	711a      	strb	r2, [r3, #4]
	  txbuffer[5] = '\r';
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001268:	220d      	movs	r2, #13
 800126a:	715a      	strb	r2, [r3, #5]
	  txbuffer[6] = '\n';
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800126e:	220a      	movs	r2, #10
 8001270:	719a      	strb	r2, [r3, #6]

	  HAL_UART_Transmit(&huart1,txbuffer,sizeof(txbuffer),1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	2207      	movs	r2, #7
 8001278:	4911      	ldr	r1, [pc, #68]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800127c:	f003 fabc 	bl	80047f8 <HAL_UART_Transmit>
 }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002a0 	.word	0x200002a0
 800128c:	20000348 	.word	0x20000348
 8001290:	20000340 	.word	0x20000340
 8001294:	20000341 	.word	0x20000341
 8001298:	2000033e 	.word	0x2000033e
 800129c:	2000033f 	.word	0x2000033f
 80012a0:	20000342 	.word	0x20000342
 80012a4:	20000344 	.word	0x20000344
 80012a8:	20000346 	.word	0x20000346
 80012ac:	20000358 	.word	0x20000358
 80012b0:	20000354 	.word	0x20000354
 80012b4:	20000334 	.word	0x20000334
 80012b8:	20000330 	.word	0x20000330
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	2000034c 	.word	0x2000034c
 80012c4:	200002e8 	.word	0x200002e8

080012c8 <HAL_UART_RxCpltCallback>:
uint8_t rxbuffer[1];
uint8_t txbuffer_eeprom[9];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 if(huart->Instance == huart1.Instance)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_RxCpltCallback+0x70>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d129      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x68>
 {
   if(rxbuffer[0] == '1')
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_UART_RxCpltCallback+0x74>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b31      	cmp	r3, #49	; 0x31
 80012e2:	d125      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x68>
   {
	   txbuffer_eeprom[0] = 49; // value = 1 is converted to ascii code
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 80012e6:	2231      	movs	r2, #49	; 0x31
 80012e8:	701a      	strb	r2, [r3, #0]
	   txbuffer_eeprom[1] = '/';
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 80012ec:	222f      	movs	r2, #47	; 0x2f
 80012ee:	705a      	strb	r2, [r3, #1]
	   txbuffer_eeprom[2] = temperature_eeprom[0];
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_UART_RxCpltCallback+0x7c>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 80012f6:	709a      	strb	r2, [r3, #2]
	   txbuffer_eeprom[3] = temperature_eeprom[1];
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_UART_RxCpltCallback+0x7c>)
 80012fa:	785a      	ldrb	r2, [r3, #1]
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 80012fe:	70da      	strb	r2, [r3, #3]
	   txbuffer_eeprom[4] = '/';
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 8001302:	222f      	movs	r2, #47	; 0x2f
 8001304:	711a      	strb	r2, [r3, #4]
	   txbuffer_eeprom[5] = humidity_eeprom[0];
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_UART_RxCpltCallback+0x80>)
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 800130c:	715a      	strb	r2, [r3, #5]
	   txbuffer_eeprom[6] = humidity_eeprom[1];
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_UART_RxCpltCallback+0x80>)
 8001310:	785a      	ldrb	r2, [r3, #1]
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 8001314:	719a      	strb	r2, [r3, #6]
	   txbuffer_eeprom[7] = '\r';
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 8001318:	220d      	movs	r2, #13
 800131a:	71da      	strb	r2, [r3, #7]
	   txbuffer_eeprom[8] = '\n';
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 800131e:	220a      	movs	r2, #10
 8001320:	721a      	strb	r2, [r3, #8]
	   HAL_UART_Transmit(&huart1, txbuffer_eeprom, sizeof(txbuffer_eeprom),1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	2209      	movs	r2, #9
 8001328:	4905      	ldr	r1, [pc, #20]	; (8001340 <HAL_UART_RxCpltCallback+0x78>)
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <HAL_UART_RxCpltCallback+0x70>)
 800132c:	f003 fa64 	bl	80047f8 <HAL_UART_Transmit>
   }
   //HAL_UART_Receive_IT(&huart1, rxbuffer, sizeof(rxbuffer));
 }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002e8 	.word	0x200002e8
 800133c:	2000035c 	.word	0x2000035c
 8001340:	20000360 	.word	0x20000360
 8001344:	2000033c 	.word	0x2000033c
 8001348:	20000338 	.word	0x20000338

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f000 fbfa 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f84a 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f000 f980 	bl	800165c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800135c:	f000 f954 	bl	8001608 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001360:	f000 f88a 	bl	8001478 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001364:	f000 f8b6 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001368:	f000 f900 	bl	800156c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart1,txbuffer,sizeof(txbuffer),1000);
  //temperature_flash = Flash_ReadData(ADDRESS_FLASH_TEMPE);
  //humidity_flash = Flash_ReadData(ADDRESS_FLASH_HUMID);
  EEPROM_Read(10, 0, temperature_eeprom,2);
 800136c:	2302      	movs	r3, #2
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <main+0x78>)
 8001370:	2100      	movs	r1, #0
 8001372:	200a      	movs	r0, #10
 8001374:	f7ff fd26 	bl	8000dc4 <EEPROM_Read>
  EEPROM_Read(10, 10, humidity_eeprom, 2);
 8001378:	2302      	movs	r3, #2
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <main+0x7c>)
 800137c:	210a      	movs	r1, #10
 800137e:	200a      	movs	r0, #10
 8001380:	f7ff fd20 	bl	8000dc4 <EEPROM_Read>
  HAL_TIM_Base_Start(&htim2);
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <main+0x80>)
 8001386:	f002 fdef 	bl	8003f68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <main+0x84>)
 800138c:	f002 fe36 	bl	8003ffc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, rxbuffer, sizeof(rxbuffer));
 8001390:	2201      	movs	r2, #1
 8001392:	4910      	ldr	r1, [pc, #64]	; (80013d4 <main+0x88>)
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <main+0x8c>)
 8001396:	f003 fab2 	bl	80048fe <HAL_UART_Receive_IT>
  LCD_Init();
 800139a:	f7ff fbed 	bl	8000b78 <LCD_Init>
  LCD_String(tempe_display);
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <main+0x90>)
 80013a0:	f7ff fc31 	bl	8000c06 <LCD_String>
  LCD_GotoXY_String(2,1,humid_display);
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <main+0x94>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	2002      	movs	r0, #2
 80013aa:	f7ff fc44 	bl	8000c36 <LCD_GotoXY_String>
  LCD_GotoXY_String(1,13,"*C");
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <main+0x98>)
 80013b0:	210d      	movs	r1, #13
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fc3f 	bl	8000c36 <LCD_GotoXY_String>
  LCD_GotoXY_String(2,10,"%");
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <main+0x9c>)
 80013ba:	210a      	movs	r1, #10
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff fc3a 	bl	8000c36 <LCD_GotoXY_String>
  // tickstart = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <main+0x76>
 80013c4:	2000033c 	.word	0x2000033c
 80013c8:	20000338 	.word	0x20000338
 80013cc:	20000258 	.word	0x20000258
 80013d0:	200002a0 	.word	0x200002a0
 80013d4:	2000035c 	.word	0x2000035c
 80013d8:	200002e8 	.word	0x200002e8
 80013dc:	20000000 	.word	0x20000000
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	08007db0 	.word	0x08007db0
 80013e8:	08007db4 	.word	0x08007db4

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b090      	sub	sp, #64	; 0x40
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fd87 	bl	8005f0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800142a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4618      	mov	r0, r3
 8001436:	f002 f937 	bl	80036a8 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001440:	f000 f958 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fba4 	bl	8003bac <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800146a:	f000 f943 	bl	80016f4 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C1_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014b6:	f000 ff1d 	bl	80022f4 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c0:	f000 f918 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000204 	.word	0x20000204
 80014cc:	40005400 	.word	0x40005400
 80014d0:	00061a80 	.word	0x00061a80

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_TIM2_Init+0x94>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_TIM2_Init+0x94>)
 80014fa:	2227      	movs	r2, #39	; 0x27
 80014fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_TIM2_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_TIM2_Init+0x94>)
 8001506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_TIM2_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_TIM2_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_TIM2_Init+0x94>)
 800151a:	f002 fcd5 	bl	8003ec8 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001524:	f000 f8e6 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <MX_TIM2_Init+0x94>)
 8001536:	f002 febb 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001540:	f000 f8d8 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM2_Init+0x94>)
 8001552:	f003 f891 	bl	8004678 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800155c:	f000 f8ca 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000258 	.word	0x20000258

0800156c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM3_Init+0x94>)
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <MX_TIM3_Init+0x98>)
 800158c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_TIM3_Init+0x94>)
 8001590:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001594:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM3_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM3_Init+0x94>)
 800159e:	f241 3287 	movw	r2, #4999	; 0x1387
 80015a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM3_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM3_Init+0x94>)
 80015b2:	f002 fc89 	bl	8003ec8 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015bc:	f000 f89a 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ce:	f002 fe6f 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015d8:	f000 f88c 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ea:	f003 f845 	bl	8004678 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f000 f87e 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002a0 	.word	0x200002a0
 8001604:	40000400 	.word	0x40000400

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f003 f88a 	bl	8004758 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f853 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002e8 	.word	0x200002e8
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_GPIO_Init+0x90>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <MX_GPIO_Init+0x90>)
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_GPIO_Init+0x90>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_GPIO_Init+0x90>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <MX_GPIO_Init+0x90>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_GPIO_Init+0x90>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_GPIO_Init+0x90>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <MX_GPIO_Init+0x90>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_GPIO_Init+0x90>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_GPIO_Init+0x94>)
 80016c0:	f000 fdff 	bl	80022c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_GPIO_Init+0x94>)
 80016de:	f000 fc55 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e2:	bf00      	nop
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010c00 	.word	0x40010c00

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_MspInit+0x5c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x5c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x5c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x5c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_MspInit+0x60>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_MspInit+0x60>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_I2C_MspInit+0x70>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d123      	bne.n	80017cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179c:	23c0      	movs	r3, #192	; 0xc0
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <HAL_I2C_MspInit+0x78>)
 80017b0:	f000 fbec 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	61d3      	str	r3, [r2, #28]
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010c00 	.word	0x40010c00

080017e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f0:	d10c      	bne.n	800180c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180a:	e018      	b.n	800183e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_TIM_Base_MspInit+0x6c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d113      	bne.n	800183e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_TIM_Base_MspInit+0x68>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	201d      	movs	r0, #29
 8001834:	f000 fac1 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001838:	201d      	movs	r0, #29
 800183a:	f000 fada 	bl	8001df2 <HAL_NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40000400 	.word	0x40000400

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_UART_MspInit+0x9c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d139      	bne.n	80018e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 8001876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_UART_MspInit+0xa0>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4619      	mov	r1, r3
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <HAL_UART_MspInit+0xa4>)
 80018b6:	f000 fb69 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_UART_MspInit+0xa4>)
 80018d0:	f000 fb5c 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2101      	movs	r1, #1
 80018d8:	2025      	movs	r0, #37	; 0x25
 80018da:	f000 fa6e 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018de:	2025      	movs	r0, #37	; 0x25
 80018e0:	f000 fa87 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f949 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM3_IRQHandler+0x10>)
 800194e:	f002 fba7 	bl	80040a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200002a0 	.word	0x200002a0

0800195c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <USART1_IRQHandler+0x10>)
 8001962:	f002 fff1 	bl	8004948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200002e8 	.word	0x200002e8

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_kill>:

int _kill(int pid, int sig)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001988:	f004 fb14 	bl	8005fb4 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	2216      	movs	r2, #22
 8001990:	601a      	str	r2, [r3, #0]
  return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_exit>:

void _exit (int status)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a6:	f04f 31ff 	mov.w	r1, #4294967295
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffe7 	bl	800197e <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b0:	e7fe      	b.n	80019b0 <_exit+0x12>

080019b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e00a      	b.n	80019da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c4:	f3af 8000 	nop.w
 80019c8:	4601      	mov	r1, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	b2ca      	uxtb	r2, r1
 80019d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbf0      	blt.n	80019c4 <_read+0x12>
  }

  return len;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e009      	b.n	8001a12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf1      	blt.n	80019fe <_write+0x12>
  }
  return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_close>:

int _close(int file)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_isatty>:

int _isatty(int file)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f004 fa7e 	bl	8005fb4 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20005000 	.word	0x20005000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	2000036c 	.word	0x2000036c
 8001aec:	200004c0 	.word	0x200004c0

08001af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001afc:	f7ff fff8 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b02:	490c      	ldr	r1, [pc, #48]	; (8001b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b18:	4c09      	ldr	r4, [pc, #36]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f004 fa4b 	bl	8005fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fc0f 	bl	800134c <main>
  bx lr
 8001b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b38:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 8001b3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b40:	200004c0 	.word	0x200004c0

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x28>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f923 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fdcc 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f93b 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f903 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000014 	.word	0x20000014
 8001bcc:	2000001c 	.word	0x2000001c
 8001bd0:	20000018 	.word	0x20000018

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x1c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	2000001c 	.word	0x2000001c
 8001bf4:	20000370 	.word	0x20000370

08001bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_GetTick+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000370 	.word	0x20000370

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <__NVIC_EnableIRQ+0x34>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff90 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff2d 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff42 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff90 	bl	8001cfc <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5f 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff35 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d008      	beq.n	8001e50 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e020      	b.n	8001e92 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020e 	bic.w	r2, r2, #14
 8001e5e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d005      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e051      	b.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 020e 	bic.w	r2, r2, #14
 8001ece:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <HAL_DMA_Abort_IT+0xd4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d029      	beq.n	8001f3e <HAL_DMA_Abort_IT+0xa2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_DMA_Abort_IT+0xd8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x9e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_DMA_Abort_IT+0xdc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01a      	beq.n	8001f34 <HAL_DMA_Abort_IT+0x98>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_DMA_Abort_IT+0xe0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d012      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x92>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_DMA_Abort_IT+0xe4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00a      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x8c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_DMA_Abort_IT+0xe8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <HAL_DMA_Abort_IT+0x86>
 8001f1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f20:	e00e      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f26:	e00b      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2c:	e008      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	e005      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f38:	e002      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f3a:	2310      	movs	r3, #16
 8001f3c:	e000      	b.n	8001f40 <HAL_DMA_Abort_IT+0xa4>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_DMA_Abort_IT+0xec>)
 8001f42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
    } 
  }
  return status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40020008 	.word	0x40020008
 8001f74:	4002001c 	.word	0x4002001c
 8001f78:	40020030 	.word	0x40020030
 8001f7c:	40020044 	.word	0x40020044
 8001f80:	40020058 	.word	0x40020058
 8001f84:	4002006c 	.word	0x4002006c
 8001f88:	40020000 	.word	0x40020000

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e169      	b.n	8002274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8158 	bne.w	800226e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a9a      	ldr	r2, [pc, #616]	; (800222c <HAL_GPIO_Init+0x2a0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fc8:	4a98      	ldr	r2, [pc, #608]	; (800222c <HAL_GPIO_Init+0x2a0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d875      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fce:	4a98      	ldr	r2, [pc, #608]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d058      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a96      	ldr	r2, [pc, #600]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d86f      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fda:	4a96      	ldr	r2, [pc, #600]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d052      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fe0:	4a94      	ldr	r2, [pc, #592]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d869      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fe6:	4a94      	ldr	r2, [pc, #592]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04c      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fec:	4a92      	ldr	r2, [pc, #584]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d863      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ff2:	4a92      	ldr	r2, [pc, #584]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d046      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a90      	ldr	r2, [pc, #576]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d85d      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d82a      	bhi.n	8002058 <HAL_GPIO_Init+0xcc>
 8002002:	2b12      	cmp	r3, #18
 8002004:	d859      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HAL_GPIO_Init+0x80>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002087 	.word	0x08002087
 8002010:	08002061 	.word	0x08002061
 8002014:	08002073 	.word	0x08002073
 8002018:	080020b5 	.word	0x080020b5
 800201c:	080020bb 	.word	0x080020bb
 8002020:	080020bb 	.word	0x080020bb
 8002024:	080020bb 	.word	0x080020bb
 8002028:	080020bb 	.word	0x080020bb
 800202c:	080020bb 	.word	0x080020bb
 8002030:	080020bb 	.word	0x080020bb
 8002034:	080020bb 	.word	0x080020bb
 8002038:	080020bb 	.word	0x080020bb
 800203c:	080020bb 	.word	0x080020bb
 8002040:	080020bb 	.word	0x080020bb
 8002044:	080020bb 	.word	0x080020bb
 8002048:	080020bb 	.word	0x080020bb
 800204c:	080020bb 	.word	0x080020bb
 8002050:	08002069 	.word	0x08002069
 8002054:	0800207d 	.word	0x0800207d
 8002058:	4a79      	ldr	r2, [pc, #484]	; (8002240 <HAL_GPIO_Init+0x2b4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800205e:	e02c      	b.n	80020ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e029      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e024      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	3308      	adds	r3, #8
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e01f      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	330c      	adds	r3, #12
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e01a      	b.n	80020bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800208e:	2304      	movs	r3, #4
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e013      	b.n	80020bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	611a      	str	r2, [r3, #16]
          break;
 80020a6:	e009      	b.n	80020bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	615a      	str	r2, [r3, #20]
          break;
 80020b2:	e003      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x130>
          break;
 80020ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d801      	bhi.n	80020c6 <HAL_GPIO_Init+0x13a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_Init+0x13e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d802      	bhi.n	80020d8 <HAL_GPIO_Init+0x14c>
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x152>
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3b08      	subs	r3, #8
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	210f      	movs	r1, #15
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80b1 	beq.w	800226e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002124:	4a48      	ldr	r2, [pc, #288]	; (8002248 <HAL_GPIO_Init+0x2bc>)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_GPIO_Init+0x2c0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3f      	ldr	r2, [pc, #252]	; (8002250 <HAL_GPIO_Init+0x2c4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <HAL_GPIO_Init+0x2c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1e4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1e0>
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 800216c:	2304      	movs	r3, #4
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002178:	2300      	movs	r3, #0
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800218a:	492f      	ldr	r1, [pc, #188]	; (8002248 <HAL_GPIO_Init+0x2bc>)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	492c      	ldr	r1, [pc, #176]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4928      	ldr	r1, [pc, #160]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4922      	ldr	r1, [pc, #136]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	491e      	ldr	r1, [pc, #120]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4918      	ldr	r1, [pc, #96]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4914      	ldr	r1, [pc, #80]	; (800225c <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d021      	beq.n	8002260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_GPIO_Init+0x2d0>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e021      	b.n	800226e <HAL_GPIO_Init+0x2e2>
 800222a:	bf00      	nop
 800222c:	10320000 	.word	0x10320000
 8002230:	10310000 	.word	0x10310000
 8002234:	10220000 	.word	0x10220000
 8002238:	10210000 	.word	0x10210000
 800223c:	10120000 	.word	0x10120000
 8002240:	10110000 	.word	0x10110000
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	40010800 	.word	0x40010800
 8002250:	40010c00 	.word	0x40010c00
 8002254:	40011000 	.word	0x40011000
 8002258:	40011400 	.word	0x40011400
 800225c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4909      	ldr	r1, [pc, #36]	; (8002290 <HAL_GPIO_Init+0x304>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f ae8e 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	372c      	adds	r7, #44	; 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e001      	b.n	80022b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
 80022ce:	4613      	mov	r3, r2
 80022d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d2:	787b      	ldrb	r3, [r7, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022de:	e003      	b.n	80022e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	041a      	lsls	r2, r3, #16
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	611a      	str	r2, [r3, #16]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e12b      	b.n	800255e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fa22 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002358:	f001 fd70 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a81      	ldr	r2, [pc, #516]	; (8002568 <HAL_I2C_Init+0x274>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d807      	bhi.n	8002378 <HAL_I2C_Init+0x84>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a80      	ldr	r2, [pc, #512]	; (800256c <HAL_I2C_Init+0x278>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e006      	b.n	8002386 <HAL_I2C_Init+0x92>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a7d      	ldr	r2, [pc, #500]	; (8002570 <HAL_I2C_Init+0x27c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0e7      	b.n	800255e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a78      	ldr	r2, [pc, #480]	; (8002574 <HAL_I2C_Init+0x280>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_I2C_Init+0x274>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d802      	bhi.n	80023c8 <HAL_I2C_Init+0xd4>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e009      	b.n	80023dc <HAL_I2C_Init+0xe8>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a69      	ldr	r2, [pc, #420]	; (8002578 <HAL_I2C_Init+0x284>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	495c      	ldr	r1, [pc, #368]	; (8002568 <HAL_I2C_Init+0x274>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d819      	bhi.n	8002430 <HAL_I2C_Init+0x13c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e59      	subs	r1, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fbb1 f3f3 	udiv	r3, r1, r3
 800240a:	1c59      	adds	r1, r3, #1
 800240c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002410:	400b      	ands	r3, r1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_I2C_Init+0x138>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1e59      	subs	r1, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb1 f3f3 	udiv	r3, r1, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	e051      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800242c:	2304      	movs	r3, #4
 800242e:	e04f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_I2C_Init+0x168>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e012      	b.n	8002482 <HAL_I2C_Init+0x18e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x196>
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <HAL_I2C_Init+0x1bc>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e58      	subs	r0, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	440b      	add	r3, r1
 80024a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6911      	ldr	r1, [r2, #16]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000186a0 	.word	0x000186a0
 800256c:	001e847f 	.word	0x001e847f
 8002570:	003d08ff 	.word	0x003d08ff
 8002574:	431bde83 	.word	0x431bde83
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fb32 	bl	8001bf8 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80e0 	bne.w	8002764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	4970      	ldr	r1, [pc, #448]	; (8002770 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fe44 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0d3      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x50>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d007      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2210      	movs	r2, #16
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_I2C_Master_Transmit+0x1f8>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fbfe 	bl	8002e3c <I2C_MasterRequestWrite>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08d      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002660:	e066      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 ff02 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x188>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fef9 	bl	8003500 <I2C_WaitOnBTFFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01a      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d194      	bne.n	8002662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100002 	.word	0x00100002
 8002774:	ffff0000 	.word	0xffff0000

08002778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff fa31 	bl	8001bf8 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 80d9 	bne.w	8002958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	496d      	ldr	r1, [pc, #436]	; (8002964 <HAL_I2C_Mem_Write+0x1ec>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fd43 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Write+0x56>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0c5      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	; 0x21
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a4d      	ldr	r2, [pc, #308]	; (8002968 <HAL_I2C_Mem_Write+0x1f0>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb7a 	bl	8002f40 <I2C_RequestMemoryWrite>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d052      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e081      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fe08 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x180>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1aa      	bne.n	8002856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fdfb 	bl	8003500 <I2C_WaitOnBTFFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e016      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800298a:	f7ff f935 	bl	8001bf8 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	f040 8244 	bne.w	8002e26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2319      	movs	r3, #25
 80029a4:	2201      	movs	r2, #1
 80029a6:	4982      	ldr	r1, [pc, #520]	; (8002bb0 <HAL_I2C_Mem_Read+0x244>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fc47 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	e237      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x5a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e230      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d007      	beq.n	80029ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2222      	movs	r2, #34	; 0x22
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <HAL_I2C_Mem_Read+0x248>)
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a2e:	88f8      	ldrh	r0, [r7, #6]
 8002a30:	893a      	ldrh	r2, [r7, #8]
 8002a32:	8979      	ldrh	r1, [r7, #10]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fb14 	bl	800306c <I2C_RequestMemoryRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1ec      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e1c0      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11e      	bne.n	8002ac4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a96:	b672      	cpsid	i
}
 8002a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac0:	b662      	cpsie	i
}
 8002ac2:	e035      	b.n	8002b30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11e      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	e012      	b.n	8002b30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b30:	e166      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 811f 	bhi.w	8002d7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d123      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fd21 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e167      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8a:	e139      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d152      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4906      	ldr	r1, [pc, #24]	; (8002bb8 <HAL_I2C_Mem_Read+0x24c>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fb4c 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e13c      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000
 8002bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c38:	e0e2      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2200      	movs	r2, #0
 8002c42:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_I2C_Mem_Read+0x4c4>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 faf9 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0e9      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c9a:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_I2C_Mem_Read+0x4c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_I2C_Mem_Read+0x4cc>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a1a      	lsrs	r2, r3, #8
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09a      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d1d9      	bne.n	8002cb4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d42:	b662      	cpsie	i
}
 8002d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e042      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fc06 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04c      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d118      	bne.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f ae94 	bne.w	8002b32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00010004 	.word	0x00010004
 8002e34:	20000014 	.word	0x20000014
 8002e38:	14f8b589 	.word	0x14f8b589

08002e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f9cd 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e035      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e01b      	b.n	8002f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <I2C_MasterRequestWrite+0xfc>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa16 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e010      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <I2C_MasterRequestWrite+0x100>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa06 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	00010008 	.word	0x00010008
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f960 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d103      	bne.n	8002f9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e05f      	b.n	800305e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	492d      	ldr	r1, [pc, #180]	; (8003068 <I2C_RequestMemoryWrite+0x128>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f9bb 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e04c      	b.n	800305e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa46 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e02b      	b.n	800305e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e021      	b.n	800305c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa20 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e005      	b.n	800305e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	00010002 	.word	0x00010002

0800306c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8c2 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030cc:	d103      	bne.n	80030d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0aa      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	4952      	ldr	r1, [pc, #328]	; (8003238 <I2C_RequestMemoryRead+0x1cc>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f91d 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e097      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f9a8 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e076      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]
 8003152:	e021      	b.n	8003198 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b29b      	uxth	r3, r3
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f982 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b04      	cmp	r3, #4
 8003178:	d107      	bne.n	800318a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e050      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800318e:	893b      	ldrh	r3, [r7, #8]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	6a39      	ldr	r1, [r7, #32]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f967 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e035      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2200      	movs	r2, #0
 80031dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f82b 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d103      	bne.n	8003204 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e013      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	4906      	ldr	r1, [pc, #24]	; (8003238 <I2C_RequestMemoryRead+0x1cc>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f886 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	00010002 	.word	0x00010002

0800323c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	e048      	b.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d044      	beq.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7fe fccf 	bl	8001bf8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d139      	bne.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10d      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	43da      	mvns	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	e00c      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d116      	bne.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e023      	b.n	8003328 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10d      	bne.n	8003306 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	e00c      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	43da      	mvns	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	d093      	beq.n	800324e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333e:	e071      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d123      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e067      	b.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d041      	beq.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a0:	f7fe fc2a 	bl	8001bf8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d136      	bne.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10c      	bne.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e00b      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e021      	b.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10c      	bne.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e00b      	b.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	f47f af6d 	bne.w	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347c:	e034      	b.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8e3 	bl	800364a <I2C_IsAcknowledgeFailed>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e034      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d028      	beq.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe fbaf 	bl	8001bf8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11d      	bne.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d016      	beq.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d1c3      	bne.n	800347e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350c:	e034      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f89b 	bl	800364a <I2C_IsAcknowledgeFailed>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e034      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d028      	beq.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fb67 	bl	8001bf8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11d      	bne.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d016      	beq.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d1c3      	bne.n	800350e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800359c:	e049      	b.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d119      	bne.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e030      	b.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fe fb0a 	bl	8001bf8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11d      	bne.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d016      	beq.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d1ae      	bne.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d11b      	bne.n	800369a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e272      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8087 	beq.w	80037d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d00c      	beq.n	80036ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d4:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d112      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
 80036e0:	4b8c      	ldr	r3, [pc, #560]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d10b      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d06c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x12c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d168      	bne.n	80037d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e24c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x76>
 8003710:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7f      	ldr	r2, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0xbc>
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a71      	ldr	r2, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003764:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fa38 	bl	8001bf8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fa34 	bl	8001bf8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e200      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b5d      	ldr	r3, [pc, #372]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xe4>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fa24 	bl	8001bf8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fa20 	bl	8001bf8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1ec      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x10c>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d11c      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
 80037fa:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1c0      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4939      	ldr	r1, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	e03a      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe f9d9 	bl	8001bf8 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe f9d5 	bl	8001bf8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1a1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4927      	ldr	r1, [pc, #156]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe f9b8 	bl	8001bf8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe f9b4 	bl	8001bf8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e180      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03a      	beq.n	800392c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c4:	f7fe f998 	bl	8001bf8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe f994 	bl	8001bf8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e160      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 face 	bl	8003e8c <RCC_Delay>
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fe f97e 	bl	8001bf8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe f97a 	bl	8001bf8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d908      	bls.n	8003920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e146      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	42420000 	.word	0x42420000
 800391c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e9      	bne.n	8003900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a6 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a87      	ldr	r2, [pc, #540]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7e      	ldr	r2, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fe f93b 	bl	8001bf8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fe f937 	bl	8001bf8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e103      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x312>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x334>
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	e01c      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x356>
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e00b      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe f8eb 	bl	8001bf8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe f8e7 	bl	8001bf8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0b1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCC_OscConfig+0x37e>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe f8d5 	bl	8001bf8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe f8d1 	bl	8001bf8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e09b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8087 	beq.w	8003b9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d061      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d146      	bne.n	8003b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe f8a5 	bl	8001bf8 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe f8a1 	bl	8001bf8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e06d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d108      	bne.n	8003aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4921      	ldr	r1, [pc, #132]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aec:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a19      	ldr	r1, [r3, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	430b      	orrs	r3, r1
 8003afe:	491b      	ldr	r1, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f875 	bl	8001bf8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe f871 	bl	8001bf8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e03d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x46a>
 8003b30:	e035      	b.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe f85e 	bl	8001bf8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe f85a 	bl	8001bf8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e026      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x498>
 8003b5e:	e01e      	b.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e019      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x500>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0d0      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 0207 	bic.w	r2, r3, #7
 8003bd6:	4965      	ldr	r1, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d040      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e073      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06b      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4936      	ldr	r1, [pc, #216]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fd ffac 	bl	8001bf8 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fd ffa8 	bl	8001bf8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e053      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 020c 	and.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1eb      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d210      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4922      	ldr	r1, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1cc>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1d0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd ff0a 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08007db8 	.word	0x08007db8
 8003d78:	20000014 	.word	0x20000014
 8003d7c:	20000018 	.word	0x20000018

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x30>
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dae:	e027      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db2:	613b      	str	r3, [r7, #16]
      break;
 8003db4:	e027      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	0c5b      	lsrs	r3, r3, #17
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003de2:	fb03 f202 	mul.w	r2, r3, r2
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e004      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	613b      	str	r3, [r7, #16]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e02:	613b      	str	r3, [r7, #16]
      break;
 8003e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e06:	693b      	ldr	r3, [r7, #16]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	007a1200 	.word	0x007a1200
 8003e1c:	08007dd0 	.word	0x08007dd0
 8003e20:	08007de0 	.word	0x08007de0
 8003e24:	003d0900 	.word	0x003d0900

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	20000014 	.word	0x20000014

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff2 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08007dc8 	.word	0x08007dc8

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffde 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	0adb      	lsrs	r3, r3, #11
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08007dc8 	.word	0x08007dc8

08003e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <RCC_Delay+0x34>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <RCC_Delay+0x38>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea8:	bf00      	nop
  }
  while (Delay --);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	60fa      	str	r2, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f9      	bne.n	8003ea8 <RCC_Delay+0x1c>
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	20000014 	.word	0x20000014
 8003ec4:	10624dd3 	.word	0x10624dd3

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd fc76 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fabe 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_TIM_Base_Start+0x88>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x48>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d009      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_TIM_Base_Start+0x8c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x48>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_TIM_Base_Start+0x90>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d010      	beq.n	8003fe4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	e007      	b.n	8003fe4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03a      	b.n	800408a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_TIM_Base_Start_IT+0x98>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00e      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d009      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <HAL_TIM_Base_Start_IT+0x9c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_TIM_Base_Start_IT+0xa0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d111      	bne.n	8004078 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b06      	cmp	r3, #6
 8004064:	d010      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	e007      	b.n	8004088 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800

080040a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0202 	mvn.w	r2, #2
 80040cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9b4 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9a7 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f9b6 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0204 	mvn.w	r2, #4
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f98a 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f97d 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f98c 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b08      	cmp	r3, #8
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0208 	mvn.w	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f960 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f953 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f962 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2208      	movs	r2, #8
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f936 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f929 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f938 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0201 	mvn.w	r2, #1
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc ff6e 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa7b 	bl	8004746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8fc 	bl	8004474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b20      	cmp	r3, #32
 8004288:	d10e      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d107      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0220 	mvn.w	r2, #32
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa46 	bl	8004734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x1c>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b4      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x186>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xd4>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	f000 8086 	beq.w	8004422 <HAL_TIM_ConfigClockSource+0x172>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xa6>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x11a>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xfa>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x13a>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	f000 f968 	bl	800463a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04f      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	f000 f951 	bl	800463a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 f8c8 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	; 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f91f 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f8e6 	bl	80045a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	; 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f90f 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8a8 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f8ff 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 8004408:	e00c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 f8f6 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 800441a:	e003      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
	...

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a29      	ldr	r2, [pc, #164]	; (8004540 <TIM_Base_SetConfig+0xb8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <TIM_Base_SetConfig+0xbc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <TIM_Base_SetConfig+0xc0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <TIM_Base_SetConfig+0xb8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <TIM_Base_SetConfig+0xbc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <TIM_Base_SetConfig+0xc0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <TIM_Base_SetConfig+0xb8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	615a      	str	r2, [r3, #20]
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800

0800454c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 030a 	bic.w	r3, r3, #10
 8004588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0210 	bic.w	r2, r3, #16
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	031b      	lsls	r3, r3, #12
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	f043 0307 	orr.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b087      	sub	sp, #28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004654:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	431a      	orrs	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	609a      	str	r2, [r3, #8]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e046      	b.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d009      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10c      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800

08004734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e042      	b.n	80047f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd f866 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	; 0x24
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800479a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fdc5 	bl	800532c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	d16d      	bne.n	80048f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UART_Transmit+0x2c>
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e066      	b.n	80048f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2221      	movs	r2, #33	; 0x21
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004836:	f7fd f9df 	bl	8001bf8 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004850:	d108      	bne.n	8004864 <HAL_UART_Transmit+0x6c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e003      	b.n	800486c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800486c:	e02a      	b.n	80048c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fb14 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e036      	b.n	80048f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	3302      	adds	r3, #2
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	e007      	b.n	80048b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1cf      	bne.n	800486e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2140      	movs	r1, #64	; 0x40
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fae4 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b20      	cmp	r3, #32
 8004916:	d112      	bne.n	800493e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_UART_Receive_IT+0x26>
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e00b      	b.n	8004940 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fb24 	bl	8004f82 <UART_Start_Receive_IT>
 800493a:	4603      	mov	r3, r0
 800493c:	e000      	b.n	8004940 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0ba      	sub	sp, #232	; 0xe8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_UART_IRQHandler+0x66>
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fc01 	bl	80051ae <UART_Receive_IT>
      return;
 80049ac:	e25b      	b.n	8004e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80de 	beq.w	8004b74 <HAL_UART_IRQHandler+0x22c>
 80049b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80d1 	beq.w	8004b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_UART_IRQHandler+0xae>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_UART_IRQHandler+0xd2>
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_UART_IRQHandler+0xf6>
 8004a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_UART_IRQHandler+0x126>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f043 0208 	orr.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 81f2 	beq.w	8004e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14e>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb8c 	bl	80051ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x17a>
 8004aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04f      	beq.n	8004b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa96 	bl	8004ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d041      	beq.n	8004b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1d9      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d013      	beq.n	8004b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	; (8004d28 <HAL_UART_IRQHandler+0x3e0>)
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd f9b0 	bl	8001e9c <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e00e      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f993 	bl	8004e7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	e00a      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f98f 	bl	8004e7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	e006      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f98b 	bl	8004e7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b6e:	e175      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	bf00      	nop
    return;
 8004b72:	e173      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	f040 814f 	bne.w	8004e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8148 	beq.w	8004e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8141 	beq.w	8004e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80b6 	beq.w	8004d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8145 	beq.w	8004e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bde:	429a      	cmp	r2, r3
 8004be0:	f080 813e 	bcs.w	8004e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	f000 8088 	beq.w	8004d08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1d9      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e1      	bne.n	8004c44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ca4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ca6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004caa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e3      	bne.n	8004c80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd8:	f023 0310 	bic.w	r3, r3, #16
 8004cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cea:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e3      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fd f88f 	bl	8001e26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8b6 	bl	8004e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d24:	e09c      	b.n	8004e60 <HAL_UART_IRQHandler+0x518>
 8004d26:	bf00      	nop
 8004d28:	080050b9 	.word	0x080050b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 808e 	beq.w	8004e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8089 	beq.w	8004e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d76:	647a      	str	r2, [r7, #68]	; 0x44
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e3      	bne.n	8004d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	623b      	str	r3, [r7, #32]
   return(result);
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dae:	633a      	str	r2, [r7, #48]	; 0x30
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e3      	bne.n	8004d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0310 	bic.w	r3, r3, #16
 8004de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004df4:	61fa      	str	r2, [r7, #28]
 8004df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	617b      	str	r3, [r7, #20]
   return(result);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e3      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f83b 	bl	8004e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e1a:	e023      	b.n	8004e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_UART_IRQHandler+0x4f4>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f953 	bl	80050e0 <UART_Transmit_IT>
    return;
 8004e3a:	e014      	b.n	8004e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <HAL_UART_IRQHandler+0x51e>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f992 	bl	800517e <UART_EndTransmit_IT>
    return;
 8004e5a:	e004      	b.n	8004e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e5c:	bf00      	nop
 8004e5e:	e002      	b.n	8004e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e60:	bf00      	nop
 8004e62:	e000      	b.n	8004e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e64:	bf00      	nop
  }
}
 8004e66:	37e8      	adds	r7, #232	; 0xe8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b090      	sub	sp, #64	; 0x40
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb6:	e050      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d04c      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec6:	f7fc fe97 	bl	8001bf8 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d241      	bcs.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2a:	623a      	str	r2, [r7, #32]
 8004f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	69f9      	ldr	r1, [r7, #28]
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e00f      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d09f      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3740      	adds	r7, #64	; 0x40
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	88fa      	ldrh	r2, [r7, #6]
 8004f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2222      	movs	r2, #34	; 0x22
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0220 	orr.w	r2, r2, #32
 8004fe6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b095      	sub	sp, #84	; 0x54
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800501c:	643a      	str	r2, [r7, #64]	; 0x40
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3314      	adds	r3, #20
 8005036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3314      	adds	r3, #20
 800504e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e5      	bne.n	8005030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	2b01      	cmp	r3, #1
 800506a:	d119      	bne.n	80050a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	60bb      	str	r3, [r7, #8]
   return(result);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508c:	61ba      	str	r2, [r7, #24]
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6979      	ldr	r1, [r7, #20]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	613b      	str	r3, [r7, #16]
   return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ae:	bf00      	nop
 80050b0:	3754      	adds	r7, #84	; 0x54
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fed3 	bl	8004e7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b21      	cmp	r3, #33	; 0x21
 80050f2:	d13e      	bne.n	8005172 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fc:	d114      	bne.n	8005128 <UART_Transmit_IT+0x48>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d110      	bne.n	8005128 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	1c9a      	adds	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]
 8005126:	e008      	b.n	800513a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	1c59      	adds	r1, r3, #1
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6211      	str	r1, [r2, #32]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4619      	mov	r1, r3
 8005148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10f      	bne.n	800516e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fe64 	bl	8004e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b08c      	sub	sp, #48	; 0x30
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b22      	cmp	r3, #34	; 0x22
 80051c0:	f040 80ae 	bne.w	8005320 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d117      	bne.n	80051fe <UART_Receive_IT+0x50>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d113      	bne.n	80051fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
 80051fc:	e026      	b.n	800524c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d007      	beq.n	8005222 <UART_Receive_IT+0x74>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <UART_Receive_IT+0x82>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e008      	b.n	8005242 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	b2da      	uxtb	r2, r3
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4619      	mov	r1, r3
 800525a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800525c:	2b00      	cmp	r3, #0
 800525e:	d15d      	bne.n	800531c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0220 	bic.w	r2, r2, #32
 800526e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0201 	bic.w	r2, r2, #1
 800528e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d135      	bne.n	8005312 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	613b      	str	r3, [r7, #16]
   return(result);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052cc:	623a      	str	r2, [r7, #32]
 80052ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d10a      	bne.n	8005304 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fdc0 	bl	8004e90 <HAL_UARTEx_RxEventCallback>
 8005310:	e002      	b.n	8005318 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb ffd8 	bl	80012c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e002      	b.n	8005322 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3730      	adds	r7, #48	; 0x30
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005366:	f023 030c 	bic.w	r3, r3, #12
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	430b      	orrs	r3, r1
 8005372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <UART_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d103      	bne.n	800539c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005394:	f7fe fd66 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	e002      	b.n	80053a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe fd4e 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80053a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009a      	lsls	r2, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <UART_SetConfig+0x118>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	0119      	lsls	r1, r3, #4
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <UART_SetConfig+0x118>)
 80053da:	fba3 0302 	umull	r0, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2064      	movs	r0, #100	; 0x64
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	; 0x32
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <UART_SetConfig+0x118>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f8:	4419      	add	r1, r3
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009a      	lsls	r2, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <UART_SetConfig+0x118>)
 8005412:	fba3 0302 	umull	r0, r3, r3, r2
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2064      	movs	r0, #100	; 0x64
 800541a:	fb00 f303 	mul.w	r3, r0, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	3332      	adds	r3, #50	; 0x32
 8005424:	4a07      	ldr	r2, [pc, #28]	; (8005444 <UART_SetConfig+0x118>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	440a      	add	r2, r1
 8005436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40013800 	.word	0x40013800
 8005444:	51eb851f 	.word	0x51eb851f

08005448 <__cvt>:
 8005448:	2b00      	cmp	r3, #0
 800544a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544e:	461f      	mov	r7, r3
 8005450:	bfbb      	ittet	lt
 8005452:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005456:	461f      	movlt	r7, r3
 8005458:	2300      	movge	r3, #0
 800545a:	232d      	movlt	r3, #45	; 0x2d
 800545c:	b088      	sub	sp, #32
 800545e:	4614      	mov	r4, r2
 8005460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005462:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005464:	7013      	strb	r3, [r2, #0]
 8005466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005468:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800546c:	f023 0820 	bic.w	r8, r3, #32
 8005470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005474:	d005      	beq.n	8005482 <__cvt+0x3a>
 8005476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800547a:	d100      	bne.n	800547e <__cvt+0x36>
 800547c:	3501      	adds	r5, #1
 800547e:	2302      	movs	r3, #2
 8005480:	e000      	b.n	8005484 <__cvt+0x3c>
 8005482:	2303      	movs	r3, #3
 8005484:	aa07      	add	r2, sp, #28
 8005486:	9204      	str	r2, [sp, #16]
 8005488:	aa06      	add	r2, sp, #24
 800548a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800548e:	e9cd 3500 	strd	r3, r5, [sp]
 8005492:	4622      	mov	r2, r4
 8005494:	463b      	mov	r3, r7
 8005496:	f000 fe53 	bl	8006140 <_dtoa_r>
 800549a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800549e:	4606      	mov	r6, r0
 80054a0:	d102      	bne.n	80054a8 <__cvt+0x60>
 80054a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054a4:	07db      	lsls	r3, r3, #31
 80054a6:	d522      	bpl.n	80054ee <__cvt+0xa6>
 80054a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054ac:	eb06 0905 	add.w	r9, r6, r5
 80054b0:	d110      	bne.n	80054d4 <__cvt+0x8c>
 80054b2:	7833      	ldrb	r3, [r6, #0]
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d10a      	bne.n	80054ce <__cvt+0x86>
 80054b8:	2200      	movs	r2, #0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80054c4:	b918      	cbnz	r0, 80054ce <__cvt+0x86>
 80054c6:	f1c5 0501 	rsb	r5, r5, #1
 80054ca:	f8ca 5000 	str.w	r5, [sl]
 80054ce:	f8da 3000 	ldr.w	r3, [sl]
 80054d2:	4499      	add	r9, r3
 80054d4:	2200      	movs	r2, #0
 80054d6:	2300      	movs	r3, #0
 80054d8:	4620      	mov	r0, r4
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fb fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80054e0:	b108      	cbz	r0, 80054e6 <__cvt+0x9e>
 80054e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80054e6:	2230      	movs	r2, #48	; 0x30
 80054e8:	9b07      	ldr	r3, [sp, #28]
 80054ea:	454b      	cmp	r3, r9
 80054ec:	d307      	bcc.n	80054fe <__cvt+0xb6>
 80054ee:	4630      	mov	r0, r6
 80054f0:	9b07      	ldr	r3, [sp, #28]
 80054f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054f4:	1b9b      	subs	r3, r3, r6
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	b008      	add	sp, #32
 80054fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	9107      	str	r1, [sp, #28]
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e7f0      	b.n	80054e8 <__cvt+0xa0>

08005506 <__exponent>:
 8005506:	4603      	mov	r3, r0
 8005508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550a:	2900      	cmp	r1, #0
 800550c:	f803 2b02 	strb.w	r2, [r3], #2
 8005510:	bfb6      	itet	lt
 8005512:	222d      	movlt	r2, #45	; 0x2d
 8005514:	222b      	movge	r2, #43	; 0x2b
 8005516:	4249      	neglt	r1, r1
 8005518:	2909      	cmp	r1, #9
 800551a:	7042      	strb	r2, [r0, #1]
 800551c:	dd2a      	ble.n	8005574 <__exponent+0x6e>
 800551e:	f10d 0207 	add.w	r2, sp, #7
 8005522:	4617      	mov	r7, r2
 8005524:	260a      	movs	r6, #10
 8005526:	fb91 f5f6 	sdiv	r5, r1, r6
 800552a:	4694      	mov	ip, r2
 800552c:	fb06 1415 	mls	r4, r6, r5, r1
 8005530:	3430      	adds	r4, #48	; 0x30
 8005532:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005536:	460c      	mov	r4, r1
 8005538:	2c63      	cmp	r4, #99	; 0x63
 800553a:	4629      	mov	r1, r5
 800553c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005540:	dcf1      	bgt.n	8005526 <__exponent+0x20>
 8005542:	3130      	adds	r1, #48	; 0x30
 8005544:	f1ac 0402 	sub.w	r4, ip, #2
 8005548:	f802 1c01 	strb.w	r1, [r2, #-1]
 800554c:	4622      	mov	r2, r4
 800554e:	1c41      	adds	r1, r0, #1
 8005550:	42ba      	cmp	r2, r7
 8005552:	d30a      	bcc.n	800556a <__exponent+0x64>
 8005554:	f10d 0209 	add.w	r2, sp, #9
 8005558:	eba2 020c 	sub.w	r2, r2, ip
 800555c:	42bc      	cmp	r4, r7
 800555e:	bf88      	it	hi
 8005560:	2200      	movhi	r2, #0
 8005562:	4413      	add	r3, r2
 8005564:	1a18      	subs	r0, r3, r0
 8005566:	b003      	add	sp, #12
 8005568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800556a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800556e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005572:	e7ed      	b.n	8005550 <__exponent+0x4a>
 8005574:	2330      	movs	r3, #48	; 0x30
 8005576:	3130      	adds	r1, #48	; 0x30
 8005578:	7083      	strb	r3, [r0, #2]
 800557a:	70c1      	strb	r1, [r0, #3]
 800557c:	1d03      	adds	r3, r0, #4
 800557e:	e7f1      	b.n	8005564 <__exponent+0x5e>

08005580 <_printf_float>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b091      	sub	sp, #68	; 0x44
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800558c:	4616      	mov	r6, r2
 800558e:	461f      	mov	r7, r3
 8005590:	4605      	mov	r5, r0
 8005592:	f000 fcc5 	bl	8005f20 <_localeconv_r>
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	9309      	str	r3, [sp, #36]	; 0x24
 800559c:	f7fa fdd8 	bl	8000150 <strlen>
 80055a0:	2300      	movs	r3, #0
 80055a2:	930e      	str	r3, [sp, #56]	; 0x38
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	900a      	str	r0, [sp, #40]	; 0x28
 80055aa:	3307      	adds	r3, #7
 80055ac:	f023 0307 	bic.w	r3, r3, #7
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80055b8:	f8d4 b000 	ldr.w	fp, [r4]
 80055bc:	f8c8 2000 	str.w	r2, [r8]
 80055c0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80055c4:	4652      	mov	r2, sl
 80055c6:	4643      	mov	r3, r8
 80055c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055cc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80055d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	4650      	mov	r0, sl
 80055d8:	4b9c      	ldr	r3, [pc, #624]	; (800584c <_printf_float+0x2cc>)
 80055da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055dc:	f7fb fa16 	bl	8000a0c <__aeabi_dcmpun>
 80055e0:	bb70      	cbnz	r0, 8005640 <_printf_float+0xc0>
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	4650      	mov	r0, sl
 80055e8:	4b98      	ldr	r3, [pc, #608]	; (800584c <_printf_float+0x2cc>)
 80055ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ec:	f7fb f9f0 	bl	80009d0 <__aeabi_dcmple>
 80055f0:	bb30      	cbnz	r0, 8005640 <_printf_float+0xc0>
 80055f2:	2200      	movs	r2, #0
 80055f4:	2300      	movs	r3, #0
 80055f6:	4650      	mov	r0, sl
 80055f8:	4641      	mov	r1, r8
 80055fa:	f7fb f9df 	bl	80009bc <__aeabi_dcmplt>
 80055fe:	b110      	cbz	r0, 8005606 <_printf_float+0x86>
 8005600:	232d      	movs	r3, #45	; 0x2d
 8005602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005606:	4a92      	ldr	r2, [pc, #584]	; (8005850 <_printf_float+0x2d0>)
 8005608:	4b92      	ldr	r3, [pc, #584]	; (8005854 <_printf_float+0x2d4>)
 800560a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800560e:	bf94      	ite	ls
 8005610:	4690      	movls	r8, r2
 8005612:	4698      	movhi	r8, r3
 8005614:	2303      	movs	r3, #3
 8005616:	f04f 0a00 	mov.w	sl, #0
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	f02b 0304 	bic.w	r3, fp, #4
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	4633      	mov	r3, r6
 8005624:	4621      	mov	r1, r4
 8005626:	4628      	mov	r0, r5
 8005628:	9700      	str	r7, [sp, #0]
 800562a:	aa0f      	add	r2, sp, #60	; 0x3c
 800562c:	f000 f9d6 	bl	80059dc <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	f040 8090 	bne.w	8005756 <_printf_float+0x1d6>
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	b011      	add	sp, #68	; 0x44
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	4652      	mov	r2, sl
 8005642:	4643      	mov	r3, r8
 8005644:	4650      	mov	r0, sl
 8005646:	4641      	mov	r1, r8
 8005648:	f7fb f9e0 	bl	8000a0c <__aeabi_dcmpun>
 800564c:	b148      	cbz	r0, 8005662 <_printf_float+0xe2>
 800564e:	f1b8 0f00 	cmp.w	r8, #0
 8005652:	bfb8      	it	lt
 8005654:	232d      	movlt	r3, #45	; 0x2d
 8005656:	4a80      	ldr	r2, [pc, #512]	; (8005858 <_printf_float+0x2d8>)
 8005658:	bfb8      	it	lt
 800565a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800565e:	4b7f      	ldr	r3, [pc, #508]	; (800585c <_printf_float+0x2dc>)
 8005660:	e7d3      	b.n	800560a <_printf_float+0x8a>
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	d142      	bne.n	80056f2 <_printf_float+0x172>
 800566c:	2306      	movs	r3, #6
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	9206      	str	r2, [sp, #24]
 8005674:	aa0e      	add	r2, sp, #56	; 0x38
 8005676:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800567a:	aa0d      	add	r2, sp, #52	; 0x34
 800567c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005680:	9203      	str	r2, [sp, #12]
 8005682:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005686:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	4652      	mov	r2, sl
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4628      	mov	r0, r5
 8005694:	4643      	mov	r3, r8
 8005696:	910b      	str	r1, [sp, #44]	; 0x2c
 8005698:	f7ff fed6 	bl	8005448 <__cvt>
 800569c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800569e:	4680      	mov	r8, r0
 80056a0:	2947      	cmp	r1, #71	; 0x47
 80056a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056a4:	d108      	bne.n	80056b8 <_printf_float+0x138>
 80056a6:	1cc8      	adds	r0, r1, #3
 80056a8:	db02      	blt.n	80056b0 <_printf_float+0x130>
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	4299      	cmp	r1, r3
 80056ae:	dd40      	ble.n	8005732 <_printf_float+0x1b2>
 80056b0:	f1a9 0902 	sub.w	r9, r9, #2
 80056b4:	fa5f f989 	uxtb.w	r9, r9
 80056b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056bc:	d81f      	bhi.n	80056fe <_printf_float+0x17e>
 80056be:	464a      	mov	r2, r9
 80056c0:	3901      	subs	r1, #1
 80056c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056c6:	910d      	str	r1, [sp, #52]	; 0x34
 80056c8:	f7ff ff1d 	bl	8005506 <__exponent>
 80056cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ce:	4682      	mov	sl, r0
 80056d0:	1813      	adds	r3, r2, r0
 80056d2:	2a01      	cmp	r2, #1
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	dc02      	bgt.n	80056de <_printf_float+0x15e>
 80056d8:	6822      	ldr	r2, [r4, #0]
 80056da:	07d2      	lsls	r2, r2, #31
 80056dc:	d501      	bpl.n	80056e2 <_printf_float+0x162>
 80056de:	3301      	adds	r3, #1
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d09b      	beq.n	8005622 <_printf_float+0xa2>
 80056ea:	232d      	movs	r3, #45	; 0x2d
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f0:	e797      	b.n	8005622 <_printf_float+0xa2>
 80056f2:	2947      	cmp	r1, #71	; 0x47
 80056f4:	d1bc      	bne.n	8005670 <_printf_float+0xf0>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ba      	bne.n	8005670 <_printf_float+0xf0>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7b7      	b.n	800566e <_printf_float+0xee>
 80056fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005702:	d118      	bne.n	8005736 <_printf_float+0x1b6>
 8005704:	2900      	cmp	r1, #0
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	dd0b      	ble.n	8005722 <_printf_float+0x1a2>
 800570a:	6121      	str	r1, [r4, #16]
 800570c:	b913      	cbnz	r3, 8005714 <_printf_float+0x194>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	07d0      	lsls	r0, r2, #31
 8005712:	d502      	bpl.n	800571a <_printf_float+0x19a>
 8005714:	3301      	adds	r3, #1
 8005716:	440b      	add	r3, r1
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	f04f 0a00 	mov.w	sl, #0
 800571e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005720:	e7df      	b.n	80056e2 <_printf_float+0x162>
 8005722:	b913      	cbnz	r3, 800572a <_printf_float+0x1aa>
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	07d2      	lsls	r2, r2, #31
 8005728:	d501      	bpl.n	800572e <_printf_float+0x1ae>
 800572a:	3302      	adds	r3, #2
 800572c:	e7f4      	b.n	8005718 <_printf_float+0x198>
 800572e:	2301      	movs	r3, #1
 8005730:	e7f2      	b.n	8005718 <_printf_float+0x198>
 8005732:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005738:	4299      	cmp	r1, r3
 800573a:	db05      	blt.n	8005748 <_printf_float+0x1c8>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	6121      	str	r1, [r4, #16]
 8005740:	07d8      	lsls	r0, r3, #31
 8005742:	d5ea      	bpl.n	800571a <_printf_float+0x19a>
 8005744:	1c4b      	adds	r3, r1, #1
 8005746:	e7e7      	b.n	8005718 <_printf_float+0x198>
 8005748:	2900      	cmp	r1, #0
 800574a:	bfcc      	ite	gt
 800574c:	2201      	movgt	r2, #1
 800574e:	f1c1 0202 	rsble	r2, r1, #2
 8005752:	4413      	add	r3, r2
 8005754:	e7e0      	b.n	8005718 <_printf_float+0x198>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	055a      	lsls	r2, r3, #21
 800575a:	d407      	bmi.n	800576c <_printf_float+0x1ec>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	4642      	mov	r2, r8
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	d12b      	bne.n	80057c2 <_printf_float+0x242>
 800576a:	e764      	b.n	8005636 <_printf_float+0xb6>
 800576c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005770:	f240 80dd 	bls.w	800592e <_printf_float+0x3ae>
 8005774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f914 	bl	80009a8 <__aeabi_dcmpeq>
 8005780:	2800      	cmp	r0, #0
 8005782:	d033      	beq.n	80057ec <_printf_float+0x26c>
 8005784:	2301      	movs	r3, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	4a35      	ldr	r2, [pc, #212]	; (8005860 <_printf_float+0x2e0>)
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f af51 	beq.w	8005636 <_printf_float+0xb6>
 8005794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005798:	429a      	cmp	r2, r3
 800579a:	db02      	blt.n	80057a2 <_printf_float+0x222>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	07d8      	lsls	r0, r3, #31
 80057a0:	d50f      	bpl.n	80057c2 <_printf_float+0x242>
 80057a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f af42 	beq.w	8005636 <_printf_float+0xb6>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	f104 091a 	add.w	r9, r4, #26
 80057ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057bc:	3b01      	subs	r3, #1
 80057be:	4543      	cmp	r3, r8
 80057c0:	dc09      	bgt.n	80057d6 <_printf_float+0x256>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	079b      	lsls	r3, r3, #30
 80057c6:	f100 8104 	bmi.w	80059d2 <_printf_float+0x452>
 80057ca:	68e0      	ldr	r0, [r4, #12]
 80057cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ce:	4298      	cmp	r0, r3
 80057d0:	bfb8      	it	lt
 80057d2:	4618      	movlt	r0, r3
 80057d4:	e731      	b.n	800563a <_printf_float+0xba>
 80057d6:	2301      	movs	r3, #1
 80057d8:	464a      	mov	r2, r9
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f af28 	beq.w	8005636 <_printf_float+0xb6>
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	e7e6      	b.n	80057ba <_printf_float+0x23a>
 80057ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dc38      	bgt.n	8005864 <_printf_float+0x2e4>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <_printf_float+0x2e0>)
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f af1a 	beq.w	8005636 <_printf_float+0xb6>
 8005802:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005806:	4313      	orrs	r3, r2
 8005808:	d102      	bne.n	8005810 <_printf_float+0x290>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	07d9      	lsls	r1, r3, #31
 800580e:	d5d8      	bpl.n	80057c2 <_printf_float+0x242>
 8005810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f af0b 	beq.w	8005636 <_printf_float+0xb6>
 8005820:	f04f 0900 	mov.w	r9, #0
 8005824:	f104 0a1a 	add.w	sl, r4, #26
 8005828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800582a:	425b      	negs	r3, r3
 800582c:	454b      	cmp	r3, r9
 800582e:	dc01      	bgt.n	8005834 <_printf_float+0x2b4>
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	e794      	b.n	800575e <_printf_float+0x1de>
 8005834:	2301      	movs	r3, #1
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f aef9 	beq.w	8005636 <_printf_float+0xb6>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7ee      	b.n	8005828 <_printf_float+0x2a8>
 800584a:	bf00      	nop
 800584c:	7fefffff 	.word	0x7fefffff
 8005850:	08007de2 	.word	0x08007de2
 8005854:	08007de6 	.word	0x08007de6
 8005858:	08007dea 	.word	0x08007dea
 800585c:	08007dee 	.word	0x08007dee
 8005860:	08007df2 	.word	0x08007df2
 8005864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005868:	429a      	cmp	r2, r3
 800586a:	bfa8      	it	ge
 800586c:	461a      	movge	r2, r3
 800586e:	2a00      	cmp	r2, #0
 8005870:	4691      	mov	r9, r2
 8005872:	dc37      	bgt.n	80058e4 <_printf_float+0x364>
 8005874:	f04f 0b00 	mov.w	fp, #0
 8005878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587c:	f104 021a 	add.w	r2, r4, #26
 8005880:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005884:	ebaa 0309 	sub.w	r3, sl, r9
 8005888:	455b      	cmp	r3, fp
 800588a:	dc33      	bgt.n	80058f4 <_printf_float+0x374>
 800588c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005890:	429a      	cmp	r2, r3
 8005892:	db3b      	blt.n	800590c <_printf_float+0x38c>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d438      	bmi.n	800590c <_printf_float+0x38c>
 800589a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800589e:	eba2 0903 	sub.w	r9, r2, r3
 80058a2:	eba2 020a 	sub.w	r2, r2, sl
 80058a6:	4591      	cmp	r9, r2
 80058a8:	bfa8      	it	ge
 80058aa:	4691      	movge	r9, r2
 80058ac:	f1b9 0f00 	cmp.w	r9, #0
 80058b0:	dc34      	bgt.n	800591c <_printf_float+0x39c>
 80058b2:	f04f 0800 	mov.w	r8, #0
 80058b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ba:	f104 0a1a 	add.w	sl, r4, #26
 80058be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	eba3 0309 	sub.w	r3, r3, r9
 80058c8:	4543      	cmp	r3, r8
 80058ca:	f77f af7a 	ble.w	80057c2 <_printf_float+0x242>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4652      	mov	r2, sl
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f aeac 	beq.w	8005636 <_printf_float+0xb6>
 80058de:	f108 0801 	add.w	r8, r8, #1
 80058e2:	e7ec      	b.n	80058be <_printf_float+0x33e>
 80058e4:	4613      	mov	r3, r2
 80058e6:	4631      	mov	r1, r6
 80058e8:	4642      	mov	r2, r8
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	d1c0      	bne.n	8005874 <_printf_float+0x2f4>
 80058f2:	e6a0      	b.n	8005636 <_printf_float+0xb6>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f ae99 	beq.w	8005636 <_printf_float+0xb6>
 8005904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005906:	f10b 0b01 	add.w	fp, fp, #1
 800590a:	e7b9      	b.n	8005880 <_printf_float+0x300>
 800590c:	4631      	mov	r1, r6
 800590e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	d1bf      	bne.n	800589a <_printf_float+0x31a>
 800591a:	e68c      	b.n	8005636 <_printf_float+0xb6>
 800591c:	464b      	mov	r3, r9
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	eb08 020a 	add.w	r2, r8, sl
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	d1c2      	bne.n	80058b2 <_printf_float+0x332>
 800592c:	e683      	b.n	8005636 <_printf_float+0xb6>
 800592e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005930:	2a01      	cmp	r2, #1
 8005932:	dc01      	bgt.n	8005938 <_printf_float+0x3b8>
 8005934:	07db      	lsls	r3, r3, #31
 8005936:	d539      	bpl.n	80059ac <_printf_float+0x42c>
 8005938:	2301      	movs	r3, #1
 800593a:	4642      	mov	r2, r8
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae77 	beq.w	8005636 <_printf_float+0xb6>
 8005948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f ae6f 	beq.w	8005636 <_printf_float+0xb6>
 8005958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005964:	f7fb f820 	bl	80009a8 <__aeabi_dcmpeq>
 8005968:	b9d8      	cbnz	r0, 80059a2 <_printf_float+0x422>
 800596a:	f109 33ff 	add.w	r3, r9, #4294967295
 800596e:	f108 0201 	add.w	r2, r8, #1
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	d10e      	bne.n	800599a <_printf_float+0x41a>
 800597c:	e65b      	b.n	8005636 <_printf_float+0xb6>
 800597e:	2301      	movs	r3, #1
 8005980:	464a      	mov	r2, r9
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae54 	beq.w	8005636 <_printf_float+0xb6>
 800598e:	f108 0801 	add.w	r8, r8, #1
 8005992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005994:	3b01      	subs	r3, #1
 8005996:	4543      	cmp	r3, r8
 8005998:	dcf1      	bgt.n	800597e <_printf_float+0x3fe>
 800599a:	4653      	mov	r3, sl
 800599c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059a0:	e6de      	b.n	8005760 <_printf_float+0x1e0>
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	f104 091a 	add.w	r9, r4, #26
 80059aa:	e7f2      	b.n	8005992 <_printf_float+0x412>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4642      	mov	r2, r8
 80059b0:	e7df      	b.n	8005972 <_printf_float+0x3f2>
 80059b2:	2301      	movs	r3, #1
 80059b4:	464a      	mov	r2, r9
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae3a 	beq.w	8005636 <_printf_float+0xb6>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059ca:	1a5b      	subs	r3, r3, r1
 80059cc:	4543      	cmp	r3, r8
 80059ce:	dcf0      	bgt.n	80059b2 <_printf_float+0x432>
 80059d0:	e6fb      	b.n	80057ca <_printf_float+0x24a>
 80059d2:	f04f 0800 	mov.w	r8, #0
 80059d6:	f104 0919 	add.w	r9, r4, #25
 80059da:	e7f4      	b.n	80059c6 <_printf_float+0x446>

080059dc <_printf_common>:
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	4616      	mov	r6, r2
 80059e2:	4699      	mov	r9, r3
 80059e4:	688a      	ldr	r2, [r1, #8]
 80059e6:	690b      	ldr	r3, [r1, #16]
 80059e8:	4607      	mov	r7, r0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfb8      	it	lt
 80059ee:	4613      	movlt	r3, r2
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f6:	460c      	mov	r4, r1
 80059f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059fc:	b10a      	cbz	r2, 8005a02 <_printf_common+0x26>
 80059fe:	3301      	adds	r3, #1
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	0699      	lsls	r1, r3, #26
 8005a06:	bf42      	ittt	mi
 8005a08:	6833      	ldrmi	r3, [r6, #0]
 8005a0a:	3302      	addmi	r3, #2
 8005a0c:	6033      	strmi	r3, [r6, #0]
 8005a0e:	6825      	ldr	r5, [r4, #0]
 8005a10:	f015 0506 	ands.w	r5, r5, #6
 8005a14:	d106      	bne.n	8005a24 <_printf_common+0x48>
 8005a16:	f104 0a19 	add.w	sl, r4, #25
 8005a1a:	68e3      	ldr	r3, [r4, #12]
 8005a1c:	6832      	ldr	r2, [r6, #0]
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	dc2b      	bgt.n	8005a7c <_printf_common+0xa0>
 8005a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a28:	1e13      	subs	r3, r2, #0
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	bf18      	it	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	0692      	lsls	r2, r2, #26
 8005a32:	d430      	bmi.n	8005a96 <_printf_common+0xba>
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a3c:	47c0      	blx	r8
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d023      	beq.n	8005a8a <_printf_common+0xae>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	f003 0306 	and.w	r3, r3, #6
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	bf14      	ite	ne
 8005a4e:	2500      	movne	r5, #0
 8005a50:	6833      	ldreq	r3, [r6, #0]
 8005a52:	f04f 0600 	mov.w	r6, #0
 8005a56:	bf08      	it	eq
 8005a58:	68e5      	ldreq	r5, [r4, #12]
 8005a5a:	f104 041a 	add.w	r4, r4, #26
 8005a5e:	bf08      	it	eq
 8005a60:	1aed      	subeq	r5, r5, r3
 8005a62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a66:	bf08      	it	eq
 8005a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfc4      	itt	gt
 8005a70:	1a9b      	subgt	r3, r3, r2
 8005a72:	18ed      	addgt	r5, r5, r3
 8005a74:	42b5      	cmp	r5, r6
 8005a76:	d11a      	bne.n	8005aae <_printf_common+0xd2>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e008      	b.n	8005a8e <_printf_common+0xb2>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	4652      	mov	r2, sl
 8005a80:	4649      	mov	r1, r9
 8005a82:	4638      	mov	r0, r7
 8005a84:	47c0      	blx	r8
 8005a86:	3001      	adds	r0, #1
 8005a88:	d103      	bne.n	8005a92 <_printf_common+0xb6>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a92:	3501      	adds	r5, #1
 8005a94:	e7c1      	b.n	8005a1a <_printf_common+0x3e>
 8005a96:	2030      	movs	r0, #48	; 0x30
 8005a98:	18e1      	adds	r1, r4, r3
 8005a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa4:	4422      	add	r2, r4
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aac:	e7c2      	b.n	8005a34 <_printf_common+0x58>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	47c0      	blx	r8
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d0e6      	beq.n	8005a8a <_printf_common+0xae>
 8005abc:	3601      	adds	r6, #1
 8005abe:	e7d9      	b.n	8005a74 <_printf_common+0x98>

08005ac0 <_printf_i>:
 8005ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	7e0f      	ldrb	r7, [r1, #24]
 8005ac6:	4691      	mov	r9, r2
 8005ac8:	2f78      	cmp	r7, #120	; 0x78
 8005aca:	4680      	mov	r8, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	469a      	mov	sl, r3
 8005ad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ad6:	d807      	bhi.n	8005ae8 <_printf_i+0x28>
 8005ad8:	2f62      	cmp	r7, #98	; 0x62
 8005ada:	d80a      	bhi.n	8005af2 <_printf_i+0x32>
 8005adc:	2f00      	cmp	r7, #0
 8005ade:	f000 80d5 	beq.w	8005c8c <_printf_i+0x1cc>
 8005ae2:	2f58      	cmp	r7, #88	; 0x58
 8005ae4:	f000 80c1 	beq.w	8005c6a <_printf_i+0x1aa>
 8005ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af0:	e03a      	b.n	8005b68 <_printf_i+0xa8>
 8005af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005af6:	2b15      	cmp	r3, #21
 8005af8:	d8f6      	bhi.n	8005ae8 <_printf_i+0x28>
 8005afa:	a101      	add	r1, pc, #4	; (adr r1, 8005b00 <_printf_i+0x40>)
 8005afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b00:	08005b59 	.word	0x08005b59
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005ae9 	.word	0x08005ae9
 8005b0c:	08005ae9 	.word	0x08005ae9
 8005b10:	08005ae9 	.word	0x08005ae9
 8005b14:	08005ae9 	.word	0x08005ae9
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005ae9 	.word	0x08005ae9
 8005b20:	08005ae9 	.word	0x08005ae9
 8005b24:	08005ae9 	.word	0x08005ae9
 8005b28:	08005ae9 	.word	0x08005ae9
 8005b2c:	08005c73 	.word	0x08005c73
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005c2d 	.word	0x08005c2d
 8005b38:	08005ae9 	.word	0x08005ae9
 8005b3c:	08005ae9 	.word	0x08005ae9
 8005b40:	08005c95 	.word	0x08005c95
 8005b44:	08005ae9 	.word	0x08005ae9
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005ae9 	.word	0x08005ae9
 8005b50:	08005ae9 	.word	0x08005ae9
 8005b54:	08005c35 	.word	0x08005c35
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0a0      	b.n	8005cae <_printf_i+0x1ee>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	0607      	lsls	r7, r0, #24
 8005b72:	f103 0104 	add.w	r1, r3, #4
 8005b76:	6029      	str	r1, [r5, #0]
 8005b78:	d501      	bpl.n	8005b7e <_printf_i+0xbe>
 8005b7a:	681e      	ldr	r6, [r3, #0]
 8005b7c:	e003      	b.n	8005b86 <_printf_i+0xc6>
 8005b7e:	0646      	lsls	r6, r0, #25
 8005b80:	d5fb      	bpl.n	8005b7a <_printf_i+0xba>
 8005b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	da03      	bge.n	8005b92 <_printf_i+0xd2>
 8005b8a:	232d      	movs	r3, #45	; 0x2d
 8005b8c:	4276      	negs	r6, r6
 8005b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b92:	230a      	movs	r3, #10
 8005b94:	4859      	ldr	r0, [pc, #356]	; (8005cfc <_printf_i+0x23c>)
 8005b96:	e012      	b.n	8005bbe <_printf_i+0xfe>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1d19      	adds	r1, r3, #4
 8005b9e:	6029      	str	r1, [r5, #0]
 8005ba0:	0605      	lsls	r5, r0, #24
 8005ba2:	d501      	bpl.n	8005ba8 <_printf_i+0xe8>
 8005ba4:	681e      	ldr	r6, [r3, #0]
 8005ba6:	e002      	b.n	8005bae <_printf_i+0xee>
 8005ba8:	0641      	lsls	r1, r0, #25
 8005baa:	d5fb      	bpl.n	8005ba4 <_printf_i+0xe4>
 8005bac:	881e      	ldrh	r6, [r3, #0]
 8005bae:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2308      	moveq	r3, #8
 8005bb4:	230a      	movne	r3, #10
 8005bb6:	4851      	ldr	r0, [pc, #324]	; (8005cfc <_printf_i+0x23c>)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bbe:	6865      	ldr	r5, [r4, #4]
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	bfa8      	it	ge
 8005bc4:	6821      	ldrge	r1, [r4, #0]
 8005bc6:	60a5      	str	r5, [r4, #8]
 8005bc8:	bfa4      	itt	ge
 8005bca:	f021 0104 	bicge.w	r1, r1, #4
 8005bce:	6021      	strge	r1, [r4, #0]
 8005bd0:	b90e      	cbnz	r6, 8005bd6 <_printf_i+0x116>
 8005bd2:	2d00      	cmp	r5, #0
 8005bd4:	d04b      	beq.n	8005c6e <_printf_i+0x1ae>
 8005bd6:	4615      	mov	r5, r2
 8005bd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bdc:	fb03 6711 	mls	r7, r3, r1, r6
 8005be0:	5dc7      	ldrb	r7, [r0, r7]
 8005be2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005be6:	4637      	mov	r7, r6
 8005be8:	42bb      	cmp	r3, r7
 8005bea:	460e      	mov	r6, r1
 8005bec:	d9f4      	bls.n	8005bd8 <_printf_i+0x118>
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d10b      	bne.n	8005c0a <_printf_i+0x14a>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	07de      	lsls	r6, r3, #31
 8005bf6:	d508      	bpl.n	8005c0a <_printf_i+0x14a>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	6861      	ldr	r1, [r4, #4]
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	bfde      	ittt	le
 8005c00:	2330      	movle	r3, #48	; 0x30
 8005c02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c0a:	1b52      	subs	r2, r2, r5
 8005c0c:	6122      	str	r2, [r4, #16]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4621      	mov	r1, r4
 8005c12:	4640      	mov	r0, r8
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	aa03      	add	r2, sp, #12
 8005c1a:	f7ff fedf 	bl	80059dc <_printf_common>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d14a      	bne.n	8005cb8 <_printf_i+0x1f8>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	b004      	add	sp, #16
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	2778      	movs	r7, #120	; 0x78
 8005c36:	4832      	ldr	r0, [pc, #200]	; (8005d00 <_printf_i+0x240>)
 8005c38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	6829      	ldr	r1, [r5, #0]
 8005c40:	061f      	lsls	r7, r3, #24
 8005c42:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c46:	d402      	bmi.n	8005c4e <_printf_i+0x18e>
 8005c48:	065f      	lsls	r7, r3, #25
 8005c4a:	bf48      	it	mi
 8005c4c:	b2b6      	uxthmi	r6, r6
 8005c4e:	07df      	lsls	r7, r3, #31
 8005c50:	bf48      	it	mi
 8005c52:	f043 0320 	orrmi.w	r3, r3, #32
 8005c56:	6029      	str	r1, [r5, #0]
 8005c58:	bf48      	it	mi
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91e      	cbnz	r6, 8005c66 <_printf_i+0x1a6>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7a6      	b.n	8005bb8 <_printf_i+0xf8>
 8005c6a:	4824      	ldr	r0, [pc, #144]	; (8005cfc <_printf_i+0x23c>)
 8005c6c:	e7e4      	b.n	8005c38 <_printf_i+0x178>
 8005c6e:	4615      	mov	r5, r2
 8005c70:	e7bd      	b.n	8005bee <_printf_i+0x12e>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	6826      	ldr	r6, [r4, #0]
 8005c76:	1d18      	adds	r0, r3, #4
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	6028      	str	r0, [r5, #0]
 8005c7c:	0635      	lsls	r5, r6, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	d501      	bpl.n	8005c86 <_printf_i+0x1c6>
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	e002      	b.n	8005c8c <_printf_i+0x1cc>
 8005c86:	0670      	lsls	r0, r6, #25
 8005c88:	d5fb      	bpl.n	8005c82 <_printf_i+0x1c2>
 8005c8a:	8019      	strh	r1, [r3, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4615      	mov	r5, r2
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	e7bc      	b.n	8005c0e <_printf_i+0x14e>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	2100      	movs	r1, #0
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 f9b4 	bl	800600e <memchr>
 8005ca6:	b108      	cbz	r0, 8005cac <_printf_i+0x1ec>
 8005ca8:	1b40      	subs	r0, r0, r5
 8005caa:	6060      	str	r0, [r4, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb6:	e7aa      	b.n	8005c0e <_printf_i+0x14e>
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	47d0      	blx	sl
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0ad      	beq.n	8005c22 <_printf_i+0x162>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	079b      	lsls	r3, r3, #30
 8005cca:	d413      	bmi.n	8005cf4 <_printf_i+0x234>
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	4618      	movlt	r0, r3
 8005cd6:	e7a6      	b.n	8005c26 <_printf_i+0x166>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4632      	mov	r2, r6
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4640      	mov	r0, r8
 8005ce0:	47d0      	blx	sl
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d09d      	beq.n	8005c22 <_printf_i+0x162>
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	9903      	ldr	r1, [sp, #12]
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	42ab      	cmp	r3, r5
 8005cf0:	dcf2      	bgt.n	8005cd8 <_printf_i+0x218>
 8005cf2:	e7eb      	b.n	8005ccc <_printf_i+0x20c>
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	f104 0619 	add.w	r6, r4, #25
 8005cfa:	e7f5      	b.n	8005ce8 <_printf_i+0x228>
 8005cfc:	08007df4 	.word	0x08007df4
 8005d00:	08007e05 	.word	0x08007e05

08005d04 <std>:
 8005d04:	2300      	movs	r3, #0
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d12:	6083      	str	r3, [r0, #8]
 8005d14:	8181      	strh	r1, [r0, #12]
 8005d16:	6643      	str	r3, [r0, #100]	; 0x64
 8005d18:	81c2      	strh	r2, [r0, #14]
 8005d1a:	6183      	str	r3, [r0, #24]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	305c      	adds	r0, #92	; 0x5c
 8005d22:	f000 f8f4 	bl	8005f0e <memset>
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <std+0x58>)
 8005d28:	6224      	str	r4, [r4, #32]
 8005d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <std+0x5c>)
 8005d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <std+0x60>)
 8005d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <std+0x64>)
 8005d36:	6323      	str	r3, [r4, #48]	; 0x30
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <std+0x68>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d006      	beq.n	8005d4c <std+0x48>
 8005d3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d42:	4294      	cmp	r4, r2
 8005d44:	d002      	beq.n	8005d4c <std+0x48>
 8005d46:	33d0      	adds	r3, #208	; 0xd0
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	d105      	bne.n	8005d58 <std+0x54>
 8005d4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d54:	f000 b958 	b.w	8006008 <__retarget_lock_init_recursive>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08005e89 	.word	0x08005e89
 8005d60:	08005eab 	.word	0x08005eab
 8005d64:	08005ee3 	.word	0x08005ee3
 8005d68:	08005f07 	.word	0x08005f07
 8005d6c:	20000374 	.word	0x20000374

08005d70 <stdio_exit_handler>:
 8005d70:	4a02      	ldr	r2, [pc, #8]	; (8005d7c <stdio_exit_handler+0xc>)
 8005d72:	4903      	ldr	r1, [pc, #12]	; (8005d80 <stdio_exit_handler+0x10>)
 8005d74:	4803      	ldr	r0, [pc, #12]	; (8005d84 <stdio_exit_handler+0x14>)
 8005d76:	f000 b869 	b.w	8005e4c <_fwalk_sglue>
 8005d7a:	bf00      	nop
 8005d7c:	20000020 	.word	0x20000020
 8005d80:	080076f5 	.word	0x080076f5
 8005d84:	2000002c 	.word	0x2000002c

08005d88 <cleanup_stdio>:
 8005d88:	6841      	ldr	r1, [r0, #4]
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <cleanup_stdio+0x34>)
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	4604      	mov	r4, r0
 8005d92:	d001      	beq.n	8005d98 <cleanup_stdio+0x10>
 8005d94:	f001 fcae 	bl	80076f4 <_fflush_r>
 8005d98:	68a1      	ldr	r1, [r4, #8]
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <cleanup_stdio+0x38>)
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	d002      	beq.n	8005da6 <cleanup_stdio+0x1e>
 8005da0:	4620      	mov	r0, r4
 8005da2:	f001 fca7 	bl	80076f4 <_fflush_r>
 8005da6:	68e1      	ldr	r1, [r4, #12]
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <cleanup_stdio+0x3c>)
 8005daa:	4299      	cmp	r1, r3
 8005dac:	d004      	beq.n	8005db8 <cleanup_stdio+0x30>
 8005dae:	4620      	mov	r0, r4
 8005db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db4:	f001 bc9e 	b.w	80076f4 <_fflush_r>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000374 	.word	0x20000374
 8005dc0:	200003dc 	.word	0x200003dc
 8005dc4:	20000444 	.word	0x20000444

08005dc8 <global_stdio_init.part.0>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <global_stdio_init.part.0+0x30>)
 8005dcc:	4c0b      	ldr	r4, [pc, #44]	; (8005dfc <global_stdio_init.part.0+0x34>)
 8005dce:	4a0c      	ldr	r2, [pc, #48]	; (8005e00 <global_stdio_init.part.0+0x38>)
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f7ff ff94 	bl	8005d04 <std>
 8005ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005de0:	2201      	movs	r2, #1
 8005de2:	2109      	movs	r1, #9
 8005de4:	f7ff ff8e 	bl	8005d04 <std>
 8005de8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dec:	2202      	movs	r2, #2
 8005dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df2:	2112      	movs	r1, #18
 8005df4:	f7ff bf86 	b.w	8005d04 <std>
 8005df8:	200004ac 	.word	0x200004ac
 8005dfc:	20000374 	.word	0x20000374
 8005e00:	08005d71 	.word	0x08005d71

08005e04 <__sfp_lock_acquire>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sfp_lock_acquire+0x8>)
 8005e06:	f000 b900 	b.w	800600a <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200004b5 	.word	0x200004b5

08005e10 <__sfp_lock_release>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__sfp_lock_release+0x8>)
 8005e12:	f000 b8fb 	b.w	800600c <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	200004b5 	.word	0x200004b5

08005e1c <__sinit>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4604      	mov	r4, r0
 8005e20:	f7ff fff0 	bl	8005e04 <__sfp_lock_acquire>
 8005e24:	6a23      	ldr	r3, [r4, #32]
 8005e26:	b11b      	cbz	r3, 8005e30 <__sinit+0x14>
 8005e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2c:	f7ff bff0 	b.w	8005e10 <__sfp_lock_release>
 8005e30:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <__sinit+0x28>)
 8005e32:	6223      	str	r3, [r4, #32]
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <__sinit+0x2c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f5      	bne.n	8005e28 <__sinit+0xc>
 8005e3c:	f7ff ffc4 	bl	8005dc8 <global_stdio_init.part.0>
 8005e40:	e7f2      	b.n	8005e28 <__sinit+0xc>
 8005e42:	bf00      	nop
 8005e44:	08005d89 	.word	0x08005d89
 8005e48:	200004ac 	.word	0x200004ac

08005e4c <_fwalk_sglue>:
 8005e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e50:	4607      	mov	r7, r0
 8005e52:	4688      	mov	r8, r1
 8005e54:	4614      	mov	r4, r2
 8005e56:	2600      	movs	r6, #0
 8005e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e60:	d505      	bpl.n	8005e6e <_fwalk_sglue+0x22>
 8005e62:	6824      	ldr	r4, [r4, #0]
 8005e64:	2c00      	cmp	r4, #0
 8005e66:	d1f7      	bne.n	8005e58 <_fwalk_sglue+0xc>
 8005e68:	4630      	mov	r0, r6
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d907      	bls.n	8005e84 <_fwalk_sglue+0x38>
 8005e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	d003      	beq.n	8005e84 <_fwalk_sglue+0x38>
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	4306      	orrs	r6, r0
 8005e84:	3568      	adds	r5, #104	; 0x68
 8005e86:	e7e9      	b.n	8005e5c <_fwalk_sglue+0x10>

08005e88 <__sread>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e90:	f000 f86c 	bl	8005f6c <_read_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	bfab      	itete	ge
 8005e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e9c:	181b      	addge	r3, r3, r0
 8005e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ea2:	bfac      	ite	ge
 8005ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ea6:	81a3      	strhlt	r3, [r4, #12]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__swrite>:
 8005eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	461f      	mov	r7, r3
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	05db      	lsls	r3, r3, #23
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4616      	mov	r6, r2
 8005eba:	d505      	bpl.n	8005ec8 <__swrite+0x1e>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	f000 f840 	bl	8005f48 <_lseek_r>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	4632      	mov	r2, r6
 8005ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	f000 b857 	b.w	8005f90 <_write_r>

08005ee2 <__sseek>:
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eea:	f000 f82d 	bl	8005f48 <_lseek_r>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	bf15      	itete	ne
 8005ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005efe:	81a3      	strheq	r3, [r4, #12]
 8005f00:	bf18      	it	ne
 8005f02:	81a3      	strhne	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__sclose>:
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 b80d 	b.w	8005f28 <_close_r>

08005f0e <memset>:
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4402      	add	r2, r0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d100      	bne.n	8005f18 <memset+0xa>
 8005f16:	4770      	bx	lr
 8005f18:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1c:	e7f9      	b.n	8005f12 <memset+0x4>
	...

08005f20 <_localeconv_r>:
 8005f20:	4800      	ldr	r0, [pc, #0]	; (8005f24 <_localeconv_r+0x4>)
 8005f22:	4770      	bx	lr
 8005f24:	2000016c 	.word	0x2000016c

08005f28 <_close_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4d05      	ldr	r5, [pc, #20]	; (8005f44 <_close_r+0x1c>)
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	f7fb fd76 	bl	8001a24 <_close>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_close_r+0x1a>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_close_r+0x1a>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	200004b0 	.word	0x200004b0

08005f48 <_lseek_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	2200      	movs	r2, #0
 8005f52:	4d05      	ldr	r5, [pc, #20]	; (8005f68 <_lseek_r+0x20>)
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fb fd88 	bl	8001a6c <_lseek>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_lseek_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_lseek_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	200004b0 	.word	0x200004b0

08005f6c <_read_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_read_r+0x20>)
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb fd19 	bl	80019b2 <_read>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_read_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_read_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	200004b0 	.word	0x200004b0

08005f90 <_write_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4d05      	ldr	r5, [pc, #20]	; (8005fb0 <_write_r+0x20>)
 8005f9c:	602a      	str	r2, [r5, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f7fb fd24 	bl	80019ec <_write>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_write_r+0x1e>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_write_r+0x1e>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	200004b0 	.word	0x200004b0

08005fb4 <__errno>:
 8005fb4:	4b01      	ldr	r3, [pc, #4]	; (8005fbc <__errno+0x8>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000078 	.word	0x20000078

08005fc0 <__libc_init_array>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	4d0c      	ldr	r5, [pc, #48]	; (8005ff8 <__libc_init_array+0x38>)
 8005fc6:	4c0d      	ldr	r4, [pc, #52]	; (8005ffc <__libc_init_array+0x3c>)
 8005fc8:	1b64      	subs	r4, r4, r5
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	d109      	bne.n	8005fe4 <__libc_init_array+0x24>
 8005fd0:	f001 fee0 	bl	8007d94 <_init>
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	4d0a      	ldr	r5, [pc, #40]	; (8006000 <__libc_init_array+0x40>)
 8005fd8:	4c0a      	ldr	r4, [pc, #40]	; (8006004 <__libc_init_array+0x44>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	42a6      	cmp	r6, r4
 8005fe0:	d105      	bne.n	8005fee <__libc_init_array+0x2e>
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe8:	4798      	blx	r3
 8005fea:	3601      	adds	r6, #1
 8005fec:	e7ee      	b.n	8005fcc <__libc_init_array+0xc>
 8005fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff2:	4798      	blx	r3
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	e7f2      	b.n	8005fde <__libc_init_array+0x1e>
 8005ff8:	08008154 	.word	0x08008154
 8005ffc:	08008154 	.word	0x08008154
 8006000:	08008154 	.word	0x08008154
 8006004:	08008158 	.word	0x08008158

08006008 <__retarget_lock_init_recursive>:
 8006008:	4770      	bx	lr

0800600a <__retarget_lock_acquire_recursive>:
 800600a:	4770      	bx	lr

0800600c <__retarget_lock_release_recursive>:
 800600c:	4770      	bx	lr

0800600e <memchr>:
 800600e:	4603      	mov	r3, r0
 8006010:	b510      	push	{r4, lr}
 8006012:	b2c9      	uxtb	r1, r1
 8006014:	4402      	add	r2, r0
 8006016:	4293      	cmp	r3, r2
 8006018:	4618      	mov	r0, r3
 800601a:	d101      	bne.n	8006020 <memchr+0x12>
 800601c:	2000      	movs	r0, #0
 800601e:	e003      	b.n	8006028 <memchr+0x1a>
 8006020:	7804      	ldrb	r4, [r0, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	428c      	cmp	r4, r1
 8006026:	d1f6      	bne.n	8006016 <memchr+0x8>
 8006028:	bd10      	pop	{r4, pc}

0800602a <quorem>:
 800602a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602e:	6903      	ldr	r3, [r0, #16]
 8006030:	690c      	ldr	r4, [r1, #16]
 8006032:	4607      	mov	r7, r0
 8006034:	42a3      	cmp	r3, r4
 8006036:	db7f      	blt.n	8006138 <quorem+0x10e>
 8006038:	3c01      	subs	r4, #1
 800603a:	f100 0514 	add.w	r5, r0, #20
 800603e:	f101 0814 	add.w	r8, r1, #20
 8006042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800604c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006050:	3301      	adds	r3, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	fbb2 f6f3 	udiv	r6, r2, r3
 8006058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800605c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006060:	d331      	bcc.n	80060c6 <quorem+0x9c>
 8006062:	f04f 0e00 	mov.w	lr, #0
 8006066:	4640      	mov	r0, r8
 8006068:	46ac      	mov	ip, r5
 800606a:	46f2      	mov	sl, lr
 800606c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006070:	b293      	uxth	r3, r2
 8006072:	fb06 e303 	mla	r3, r6, r3, lr
 8006076:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800607a:	0c1a      	lsrs	r2, r3, #16
 800607c:	b29b      	uxth	r3, r3
 800607e:	fb06 220e 	mla	r2, r6, lr, r2
 8006082:	ebaa 0303 	sub.w	r3, sl, r3
 8006086:	f8dc a000 	ldr.w	sl, [ip]
 800608a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800608e:	fa1f fa8a 	uxth.w	sl, sl
 8006092:	4453      	add	r3, sl
 8006094:	f8dc a000 	ldr.w	sl, [ip]
 8006098:	b292      	uxth	r2, r2
 800609a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800609e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a8:	4581      	cmp	r9, r0
 80060aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060ae:	f84c 3b04 	str.w	r3, [ip], #4
 80060b2:	d2db      	bcs.n	800606c <quorem+0x42>
 80060b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80060b8:	b92b      	cbnz	r3, 80060c6 <quorem+0x9c>
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	3b04      	subs	r3, #4
 80060be:	429d      	cmp	r5, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	d32d      	bcc.n	8006120 <quorem+0xf6>
 80060c4:	613c      	str	r4, [r7, #16]
 80060c6:	4638      	mov	r0, r7
 80060c8:	f001 f994 	bl	80073f4 <__mcmp>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	db23      	blt.n	8006118 <quorem+0xee>
 80060d0:	4629      	mov	r1, r5
 80060d2:	2000      	movs	r0, #0
 80060d4:	3601      	adds	r6, #1
 80060d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060da:	f8d1 c000 	ldr.w	ip, [r1]
 80060de:	b293      	uxth	r3, r2
 80060e0:	1ac3      	subs	r3, r0, r3
 80060e2:	0c12      	lsrs	r2, r2, #16
 80060e4:	fa1f f08c 	uxth.w	r0, ip
 80060e8:	4403      	add	r3, r0
 80060ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060f8:	45c1      	cmp	r9, r8
 80060fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060fe:	f841 3b04 	str.w	r3, [r1], #4
 8006102:	d2e8      	bcs.n	80060d6 <quorem+0xac>
 8006104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610c:	b922      	cbnz	r2, 8006118 <quorem+0xee>
 800610e:	3b04      	subs	r3, #4
 8006110:	429d      	cmp	r5, r3
 8006112:	461a      	mov	r2, r3
 8006114:	d30a      	bcc.n	800612c <quorem+0x102>
 8006116:	613c      	str	r4, [r7, #16]
 8006118:	4630      	mov	r0, r6
 800611a:	b003      	add	sp, #12
 800611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	3b04      	subs	r3, #4
 8006124:	2a00      	cmp	r2, #0
 8006126:	d1cd      	bne.n	80060c4 <quorem+0x9a>
 8006128:	3c01      	subs	r4, #1
 800612a:	e7c8      	b.n	80060be <quorem+0x94>
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	3b04      	subs	r3, #4
 8006130:	2a00      	cmp	r2, #0
 8006132:	d1f0      	bne.n	8006116 <quorem+0xec>
 8006134:	3c01      	subs	r4, #1
 8006136:	e7eb      	b.n	8006110 <quorem+0xe6>
 8006138:	2000      	movs	r0, #0
 800613a:	e7ee      	b.n	800611a <quorem+0xf0>
 800613c:	0000      	movs	r0, r0
	...

08006140 <_dtoa_r>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	4616      	mov	r6, r2
 8006146:	461f      	mov	r7, r3
 8006148:	69c4      	ldr	r4, [r0, #28]
 800614a:	b099      	sub	sp, #100	; 0x64
 800614c:	4605      	mov	r5, r0
 800614e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006156:	b974      	cbnz	r4, 8006176 <_dtoa_r+0x36>
 8006158:	2010      	movs	r0, #16
 800615a:	f000 fe1d 	bl	8006d98 <malloc>
 800615e:	4602      	mov	r2, r0
 8006160:	61e8      	str	r0, [r5, #28]
 8006162:	b920      	cbnz	r0, 800616e <_dtoa_r+0x2e>
 8006164:	21ef      	movs	r1, #239	; 0xef
 8006166:	4bac      	ldr	r3, [pc, #688]	; (8006418 <_dtoa_r+0x2d8>)
 8006168:	48ac      	ldr	r0, [pc, #688]	; (800641c <_dtoa_r+0x2dc>)
 800616a:	f001 fb09 	bl	8007780 <__assert_func>
 800616e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006172:	6004      	str	r4, [r0, #0]
 8006174:	60c4      	str	r4, [r0, #12]
 8006176:	69eb      	ldr	r3, [r5, #28]
 8006178:	6819      	ldr	r1, [r3, #0]
 800617a:	b151      	cbz	r1, 8006192 <_dtoa_r+0x52>
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	2301      	movs	r3, #1
 8006180:	4093      	lsls	r3, r2
 8006182:	604a      	str	r2, [r1, #4]
 8006184:	608b      	str	r3, [r1, #8]
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fefa 	bl	8006f80 <_Bfree>
 800618c:	2200      	movs	r2, #0
 800618e:	69eb      	ldr	r3, [r5, #28]
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	1e3b      	subs	r3, r7, #0
 8006194:	bfaf      	iteee	ge
 8006196:	2300      	movge	r3, #0
 8006198:	2201      	movlt	r2, #1
 800619a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800619e:	9305      	strlt	r3, [sp, #20]
 80061a0:	bfa8      	it	ge
 80061a2:	f8c8 3000 	strge.w	r3, [r8]
 80061a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80061aa:	4b9d      	ldr	r3, [pc, #628]	; (8006420 <_dtoa_r+0x2e0>)
 80061ac:	bfb8      	it	lt
 80061ae:	f8c8 2000 	strlt.w	r2, [r8]
 80061b2:	ea33 0309 	bics.w	r3, r3, r9
 80061b6:	d119      	bne.n	80061ec <_dtoa_r+0xac>
 80061b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061c4:	4333      	orrs	r3, r6
 80061c6:	f000 8589 	beq.w	8006cdc <_dtoa_r+0xb9c>
 80061ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061cc:	b953      	cbnz	r3, 80061e4 <_dtoa_r+0xa4>
 80061ce:	4b95      	ldr	r3, [pc, #596]	; (8006424 <_dtoa_r+0x2e4>)
 80061d0:	e023      	b.n	800621a <_dtoa_r+0xda>
 80061d2:	4b95      	ldr	r3, [pc, #596]	; (8006428 <_dtoa_r+0x2e8>)
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	3308      	adds	r3, #8
 80061d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	9803      	ldr	r0, [sp, #12]
 80061de:	b019      	add	sp, #100	; 0x64
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	4b8f      	ldr	r3, [pc, #572]	; (8006424 <_dtoa_r+0x2e4>)
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	3303      	adds	r3, #3
 80061ea:	e7f5      	b.n	80061d8 <_dtoa_r+0x98>
 80061ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061f8:	2200      	movs	r2, #0
 80061fa:	2300      	movs	r3, #0
 80061fc:	f7fa fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8006200:	4680      	mov	r8, r0
 8006202:	b160      	cbz	r0, 800621e <_dtoa_r+0xde>
 8006204:	2301      	movs	r3, #1
 8006206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8562 	beq.w	8006cd6 <_dtoa_r+0xb96>
 8006212:	4b86      	ldr	r3, [pc, #536]	; (800642c <_dtoa_r+0x2ec>)
 8006214:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	9303      	str	r3, [sp, #12]
 800621c:	e7de      	b.n	80061dc <_dtoa_r+0x9c>
 800621e:	ab16      	add	r3, sp, #88	; 0x58
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	ab17      	add	r3, sp, #92	; 0x5c
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	4628      	mov	r0, r5
 8006228:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800622c:	f001 f98a 	bl	8007544 <__d2b>
 8006230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006234:	4682      	mov	sl, r0
 8006236:	2c00      	cmp	r4, #0
 8006238:	d07e      	beq.n	8006338 <_dtoa_r+0x1f8>
 800623a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800623e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006240:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006248:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800624c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006250:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006254:	4619      	mov	r1, r3
 8006256:	2200      	movs	r2, #0
 8006258:	4b75      	ldr	r3, [pc, #468]	; (8006430 <_dtoa_r+0x2f0>)
 800625a:	f7f9 ff85 	bl	8000168 <__aeabi_dsub>
 800625e:	a368      	add	r3, pc, #416	; (adr r3, 8006400 <_dtoa_r+0x2c0>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	a367      	add	r3, pc, #412	; (adr r3, 8006408 <_dtoa_r+0x2c8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7f9 ff7d 	bl	800016c <__adddf3>
 8006272:	4606      	mov	r6, r0
 8006274:	4620      	mov	r0, r4
 8006276:	460f      	mov	r7, r1
 8006278:	f7fa f8c4 	bl	8000404 <__aeabi_i2d>
 800627c:	a364      	add	r3, pc, #400	; (adr r3, 8006410 <_dtoa_r+0x2d0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa f929 	bl	80004d8 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4630      	mov	r0, r6
 800628c:	4639      	mov	r1, r7
 800628e:	f7f9 ff6d 	bl	800016c <__adddf3>
 8006292:	4606      	mov	r6, r0
 8006294:	460f      	mov	r7, r1
 8006296:	f7fa fbcf 	bl	8000a38 <__aeabi_d2iz>
 800629a:	2200      	movs	r2, #0
 800629c:	4683      	mov	fp, r0
 800629e:	2300      	movs	r3, #0
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7fa fb8a 	bl	80009bc <__aeabi_dcmplt>
 80062a8:	b148      	cbz	r0, 80062be <_dtoa_r+0x17e>
 80062aa:	4658      	mov	r0, fp
 80062ac:	f7fa f8aa 	bl	8000404 <__aeabi_i2d>
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	f7fa fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80062b8:	b908      	cbnz	r0, 80062be <_dtoa_r+0x17e>
 80062ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062be:	f1bb 0f16 	cmp.w	fp, #22
 80062c2:	d857      	bhi.n	8006374 <_dtoa_r+0x234>
 80062c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c8:	4b5a      	ldr	r3, [pc, #360]	; (8006434 <_dtoa_r+0x2f4>)
 80062ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7fa fb73 	bl	80009bc <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d04e      	beq.n	8006378 <_dtoa_r+0x238>
 80062da:	2300      	movs	r3, #0
 80062dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062e4:	1b1b      	subs	r3, r3, r4
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	bf46      	itte	mi
 80062ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80062ee:	2300      	movmi	r3, #0
 80062f0:	f04f 0900 	movpl.w	r9, #0
 80062f4:	9209      	str	r2, [sp, #36]	; 0x24
 80062f6:	bf48      	it	mi
 80062f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062fa:	f1bb 0f00 	cmp.w	fp, #0
 80062fe:	db3d      	blt.n	800637c <_dtoa_r+0x23c>
 8006300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006302:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006306:	445b      	add	r3, fp
 8006308:	9309      	str	r3, [sp, #36]	; 0x24
 800630a:	2300      	movs	r3, #0
 800630c:	930a      	str	r3, [sp, #40]	; 0x28
 800630e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006310:	2b09      	cmp	r3, #9
 8006312:	d867      	bhi.n	80063e4 <_dtoa_r+0x2a4>
 8006314:	2b05      	cmp	r3, #5
 8006316:	bfc4      	itt	gt
 8006318:	3b04      	subgt	r3, #4
 800631a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800631c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800631e:	bfc8      	it	gt
 8006320:	2400      	movgt	r4, #0
 8006322:	f1a3 0302 	sub.w	r3, r3, #2
 8006326:	bfd8      	it	le
 8006328:	2401      	movle	r4, #1
 800632a:	2b03      	cmp	r3, #3
 800632c:	f200 8086 	bhi.w	800643c <_dtoa_r+0x2fc>
 8006330:	e8df f003 	tbb	[pc, r3]
 8006334:	5637392c 	.word	0x5637392c
 8006338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800633c:	441c      	add	r4, r3
 800633e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006342:	2b20      	cmp	r3, #32
 8006344:	bfc1      	itttt	gt
 8006346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800634a:	fa09 f903 	lslgt.w	r9, r9, r3
 800634e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006352:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006356:	bfd6      	itet	le
 8006358:	f1c3 0320 	rsble	r3, r3, #32
 800635c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006360:	fa06 f003 	lslle.w	r0, r6, r3
 8006364:	f7fa f83e 	bl	80003e4 <__aeabi_ui2d>
 8006368:	2201      	movs	r2, #1
 800636a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800636e:	3c01      	subs	r4, #1
 8006370:	9213      	str	r2, [sp, #76]	; 0x4c
 8006372:	e76f      	b.n	8006254 <_dtoa_r+0x114>
 8006374:	2301      	movs	r3, #1
 8006376:	e7b3      	b.n	80062e0 <_dtoa_r+0x1a0>
 8006378:	900f      	str	r0, [sp, #60]	; 0x3c
 800637a:	e7b2      	b.n	80062e2 <_dtoa_r+0x1a2>
 800637c:	f1cb 0300 	rsb	r3, fp, #0
 8006380:	930a      	str	r3, [sp, #40]	; 0x28
 8006382:	2300      	movs	r3, #0
 8006384:	eba9 090b 	sub.w	r9, r9, fp
 8006388:	930e      	str	r3, [sp, #56]	; 0x38
 800638a:	e7c0      	b.n	800630e <_dtoa_r+0x1ce>
 800638c:	2300      	movs	r3, #0
 800638e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006392:	2b00      	cmp	r3, #0
 8006394:	dc55      	bgt.n	8006442 <_dtoa_r+0x302>
 8006396:	2301      	movs	r3, #1
 8006398:	461a      	mov	r2, r3
 800639a:	9306      	str	r3, [sp, #24]
 800639c:	9308      	str	r3, [sp, #32]
 800639e:	9223      	str	r2, [sp, #140]	; 0x8c
 80063a0:	e00b      	b.n	80063ba <_dtoa_r+0x27a>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e7f3      	b.n	800638e <_dtoa_r+0x24e>
 80063a6:	2300      	movs	r3, #0
 80063a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ac:	445b      	add	r3, fp
 80063ae:	9306      	str	r3, [sp, #24]
 80063b0:	3301      	adds	r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	9308      	str	r3, [sp, #32]
 80063b6:	bfb8      	it	lt
 80063b8:	2301      	movlt	r3, #1
 80063ba:	2100      	movs	r1, #0
 80063bc:	2204      	movs	r2, #4
 80063be:	69e8      	ldr	r0, [r5, #28]
 80063c0:	f102 0614 	add.w	r6, r2, #20
 80063c4:	429e      	cmp	r6, r3
 80063c6:	d940      	bls.n	800644a <_dtoa_r+0x30a>
 80063c8:	6041      	str	r1, [r0, #4]
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 fd98 	bl	8006f00 <_Balloc>
 80063d0:	9003      	str	r0, [sp, #12]
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d13c      	bne.n	8006450 <_dtoa_r+0x310>
 80063d6:	4602      	mov	r2, r0
 80063d8:	f240 11af 	movw	r1, #431	; 0x1af
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <_dtoa_r+0x2f8>)
 80063de:	e6c3      	b.n	8006168 <_dtoa_r+0x28>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e7e1      	b.n	80063a8 <_dtoa_r+0x268>
 80063e4:	2401      	movs	r4, #1
 80063e6:	2300      	movs	r3, #0
 80063e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80063ea:	9322      	str	r3, [sp, #136]	; 0x88
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295
 80063f0:	2200      	movs	r2, #0
 80063f2:	9306      	str	r3, [sp, #24]
 80063f4:	9308      	str	r3, [sp, #32]
 80063f6:	2312      	movs	r3, #18
 80063f8:	e7d1      	b.n	800639e <_dtoa_r+0x25e>
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	08007e23 	.word	0x08007e23
 800641c:	08007e3a 	.word	0x08007e3a
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	08007e1f 	.word	0x08007e1f
 8006428:	08007e16 	.word	0x08007e16
 800642c:	08007df3 	.word	0x08007df3
 8006430:	3ff80000 	.word	0x3ff80000
 8006434:	08007f28 	.word	0x08007f28
 8006438:	08007e92 	.word	0x08007e92
 800643c:	2301      	movs	r3, #1
 800643e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006440:	e7d4      	b.n	80063ec <_dtoa_r+0x2ac>
 8006442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	9308      	str	r3, [sp, #32]
 8006448:	e7b7      	b.n	80063ba <_dtoa_r+0x27a>
 800644a:	3101      	adds	r1, #1
 800644c:	0052      	lsls	r2, r2, #1
 800644e:	e7b7      	b.n	80063c0 <_dtoa_r+0x280>
 8006450:	69eb      	ldr	r3, [r5, #28]
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	9b08      	ldr	r3, [sp, #32]
 8006458:	2b0e      	cmp	r3, #14
 800645a:	f200 80a8 	bhi.w	80065ae <_dtoa_r+0x46e>
 800645e:	2c00      	cmp	r4, #0
 8006460:	f000 80a5 	beq.w	80065ae <_dtoa_r+0x46e>
 8006464:	f1bb 0f00 	cmp.w	fp, #0
 8006468:	dd34      	ble.n	80064d4 <_dtoa_r+0x394>
 800646a:	4b9a      	ldr	r3, [pc, #616]	; (80066d4 <_dtoa_r+0x594>)
 800646c:	f00b 020f 	and.w	r2, fp, #15
 8006470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800647c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006480:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006484:	d016      	beq.n	80064b4 <_dtoa_r+0x374>
 8006486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800648a:	4b93      	ldr	r3, [pc, #588]	; (80066d8 <_dtoa_r+0x598>)
 800648c:	2703      	movs	r7, #3
 800648e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006492:	f7fa f94b 	bl	800072c <__aeabi_ddiv>
 8006496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800649a:	f004 040f 	and.w	r4, r4, #15
 800649e:	4e8e      	ldr	r6, [pc, #568]	; (80066d8 <_dtoa_r+0x598>)
 80064a0:	b954      	cbnz	r4, 80064b8 <_dtoa_r+0x378>
 80064a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064aa:	f7fa f93f 	bl	800072c <__aeabi_ddiv>
 80064ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b2:	e029      	b.n	8006508 <_dtoa_r+0x3c8>
 80064b4:	2702      	movs	r7, #2
 80064b6:	e7f2      	b.n	800649e <_dtoa_r+0x35e>
 80064b8:	07e1      	lsls	r1, r4, #31
 80064ba:	d508      	bpl.n	80064ce <_dtoa_r+0x38e>
 80064bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064c4:	f7fa f808 	bl	80004d8 <__aeabi_dmul>
 80064c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064cc:	3701      	adds	r7, #1
 80064ce:	1064      	asrs	r4, r4, #1
 80064d0:	3608      	adds	r6, #8
 80064d2:	e7e5      	b.n	80064a0 <_dtoa_r+0x360>
 80064d4:	f000 80a5 	beq.w	8006622 <_dtoa_r+0x4e2>
 80064d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064dc:	f1cb 0400 	rsb	r4, fp, #0
 80064e0:	4b7c      	ldr	r3, [pc, #496]	; (80066d4 <_dtoa_r+0x594>)
 80064e2:	f004 020f 	and.w	r2, r4, #15
 80064e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 fff3 	bl	80004d8 <__aeabi_dmul>
 80064f2:	2702      	movs	r7, #2
 80064f4:	2300      	movs	r3, #0
 80064f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064fa:	4e77      	ldr	r6, [pc, #476]	; (80066d8 <_dtoa_r+0x598>)
 80064fc:	1124      	asrs	r4, r4, #4
 80064fe:	2c00      	cmp	r4, #0
 8006500:	f040 8084 	bne.w	800660c <_dtoa_r+0x4cc>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1d2      	bne.n	80064ae <_dtoa_r+0x36e>
 8006508:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800650c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8087 	beq.w	8006626 <_dtoa_r+0x4e6>
 8006518:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800651c:	2200      	movs	r2, #0
 800651e:	4b6f      	ldr	r3, [pc, #444]	; (80066dc <_dtoa_r+0x59c>)
 8006520:	f7fa fa4c 	bl	80009bc <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	d07e      	beq.n	8006626 <_dtoa_r+0x4e6>
 8006528:	9b08      	ldr	r3, [sp, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d07b      	beq.n	8006626 <_dtoa_r+0x4e6>
 800652e:	9b06      	ldr	r3, [sp, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	dd38      	ble.n	80065a6 <_dtoa_r+0x466>
 8006534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006538:	2200      	movs	r2, #0
 800653a:	4b69      	ldr	r3, [pc, #420]	; (80066e0 <_dtoa_r+0x5a0>)
 800653c:	f7f9 ffcc 	bl	80004d8 <__aeabi_dmul>
 8006540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006544:	9c06      	ldr	r4, [sp, #24]
 8006546:	f10b 38ff 	add.w	r8, fp, #4294967295
 800654a:	3701      	adds	r7, #1
 800654c:	4638      	mov	r0, r7
 800654e:	f7f9 ff59 	bl	8000404 <__aeabi_i2d>
 8006552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	2200      	movs	r2, #0
 800655c:	4b61      	ldr	r3, [pc, #388]	; (80066e4 <_dtoa_r+0x5a4>)
 800655e:	f7f9 fe05 	bl	800016c <__adddf3>
 8006562:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800656a:	9611      	str	r6, [sp, #68]	; 0x44
 800656c:	2c00      	cmp	r4, #0
 800656e:	d15d      	bne.n	800662c <_dtoa_r+0x4ec>
 8006570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006574:	2200      	movs	r2, #0
 8006576:	4b5c      	ldr	r3, [pc, #368]	; (80066e8 <_dtoa_r+0x5a8>)
 8006578:	f7f9 fdf6 	bl	8000168 <__aeabi_dsub>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006584:	4633      	mov	r3, r6
 8006586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006588:	f7fa fa36 	bl	80009f8 <__aeabi_dcmpgt>
 800658c:	2800      	cmp	r0, #0
 800658e:	f040 8295 	bne.w	8006abc <_dtoa_r+0x97c>
 8006592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800659c:	f7fa fa0e 	bl	80009bc <__aeabi_dcmplt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f040 8289 	bne.w	8006ab8 <_dtoa_r+0x978>
 80065a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80065aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f2c0 8151 	blt.w	8006858 <_dtoa_r+0x718>
 80065b6:	f1bb 0f0e 	cmp.w	fp, #14
 80065ba:	f300 814d 	bgt.w	8006858 <_dtoa_r+0x718>
 80065be:	4b45      	ldr	r3, [pc, #276]	; (80066d4 <_dtoa_r+0x594>)
 80065c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f280 80da 	bge.w	8006788 <_dtoa_r+0x648>
 80065d4:	9b08      	ldr	r3, [sp, #32]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f300 80d6 	bgt.w	8006788 <_dtoa_r+0x648>
 80065dc:	f040 826b 	bne.w	8006ab6 <_dtoa_r+0x976>
 80065e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e4:	2200      	movs	r2, #0
 80065e6:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <_dtoa_r+0x5a8>)
 80065e8:	f7f9 ff76 	bl	80004d8 <__aeabi_dmul>
 80065ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f0:	f7fa f9f8 	bl	80009e4 <__aeabi_dcmpge>
 80065f4:	9c08      	ldr	r4, [sp, #32]
 80065f6:	4626      	mov	r6, r4
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f040 8241 	bne.w	8006a80 <_dtoa_r+0x940>
 80065fe:	2331      	movs	r3, #49	; 0x31
 8006600:	9f03      	ldr	r7, [sp, #12]
 8006602:	f10b 0b01 	add.w	fp, fp, #1
 8006606:	f807 3b01 	strb.w	r3, [r7], #1
 800660a:	e23d      	b.n	8006a88 <_dtoa_r+0x948>
 800660c:	07e2      	lsls	r2, r4, #31
 800660e:	d505      	bpl.n	800661c <_dtoa_r+0x4dc>
 8006610:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006614:	f7f9 ff60 	bl	80004d8 <__aeabi_dmul>
 8006618:	2301      	movs	r3, #1
 800661a:	3701      	adds	r7, #1
 800661c:	1064      	asrs	r4, r4, #1
 800661e:	3608      	adds	r6, #8
 8006620:	e76d      	b.n	80064fe <_dtoa_r+0x3be>
 8006622:	2702      	movs	r7, #2
 8006624:	e770      	b.n	8006508 <_dtoa_r+0x3c8>
 8006626:	46d8      	mov	r8, fp
 8006628:	9c08      	ldr	r4, [sp, #32]
 800662a:	e78f      	b.n	800654c <_dtoa_r+0x40c>
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <_dtoa_r+0x594>)
 8006630:	4421      	add	r1, r4
 8006632:	9112      	str	r1, [sp, #72]	; 0x48
 8006634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006636:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800663a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800663e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006642:	2900      	cmp	r1, #0
 8006644:	d054      	beq.n	80066f0 <_dtoa_r+0x5b0>
 8006646:	2000      	movs	r0, #0
 8006648:	4928      	ldr	r1, [pc, #160]	; (80066ec <_dtoa_r+0x5ac>)
 800664a:	f7fa f86f 	bl	800072c <__aeabi_ddiv>
 800664e:	463b      	mov	r3, r7
 8006650:	4632      	mov	r2, r6
 8006652:	f7f9 fd89 	bl	8000168 <__aeabi_dsub>
 8006656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800665a:	9f03      	ldr	r7, [sp, #12]
 800665c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006660:	f7fa f9ea 	bl	8000a38 <__aeabi_d2iz>
 8006664:	4604      	mov	r4, r0
 8006666:	f7f9 fecd 	bl	8000404 <__aeabi_i2d>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006672:	f7f9 fd79 	bl	8000168 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	3430      	adds	r4, #48	; 0x30
 800667c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006684:	f807 4b01 	strb.w	r4, [r7], #1
 8006688:	f7fa f998 	bl	80009bc <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	d173      	bne.n	8006778 <_dtoa_r+0x638>
 8006690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006694:	2000      	movs	r0, #0
 8006696:	4911      	ldr	r1, [pc, #68]	; (80066dc <_dtoa_r+0x59c>)
 8006698:	f7f9 fd66 	bl	8000168 <__aeabi_dsub>
 800669c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066a0:	f7fa f98c 	bl	80009bc <__aeabi_dcmplt>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f040 80b6 	bne.w	8006816 <_dtoa_r+0x6d6>
 80066aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ac:	429f      	cmp	r7, r3
 80066ae:	f43f af7a 	beq.w	80065a6 <_dtoa_r+0x466>
 80066b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066b6:	2200      	movs	r2, #0
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <_dtoa_r+0x5a0>)
 80066ba:	f7f9 ff0d 	bl	80004d8 <__aeabi_dmul>
 80066be:	2200      	movs	r2, #0
 80066c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <_dtoa_r+0x5a0>)
 80066ca:	f7f9 ff05 	bl	80004d8 <__aeabi_dmul>
 80066ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d2:	e7c3      	b.n	800665c <_dtoa_r+0x51c>
 80066d4:	08007f28 	.word	0x08007f28
 80066d8:	08007f00 	.word	0x08007f00
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	40240000 	.word	0x40240000
 80066e4:	401c0000 	.word	0x401c0000
 80066e8:	40140000 	.word	0x40140000
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7f9 fef0 	bl	80004d8 <__aeabi_dmul>
 80066f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066fe:	9c03      	ldr	r4, [sp, #12]
 8006700:	9314      	str	r3, [sp, #80]	; 0x50
 8006702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006706:	f7fa f997 	bl	8000a38 <__aeabi_d2iz>
 800670a:	9015      	str	r0, [sp, #84]	; 0x54
 800670c:	f7f9 fe7a 	bl	8000404 <__aeabi_i2d>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006718:	f7f9 fd26 	bl	8000168 <__aeabi_dsub>
 800671c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800671e:	4606      	mov	r6, r0
 8006720:	3330      	adds	r3, #48	; 0x30
 8006722:	f804 3b01 	strb.w	r3, [r4], #1
 8006726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006728:	460f      	mov	r7, r1
 800672a:	429c      	cmp	r4, r3
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	d124      	bne.n	800677c <_dtoa_r+0x63c>
 8006732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006736:	4baf      	ldr	r3, [pc, #700]	; (80069f4 <_dtoa_r+0x8b4>)
 8006738:	f7f9 fd18 	bl	800016c <__adddf3>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7fa f958 	bl	80009f8 <__aeabi_dcmpgt>
 8006748:	2800      	cmp	r0, #0
 800674a:	d163      	bne.n	8006814 <_dtoa_r+0x6d4>
 800674c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006750:	2000      	movs	r0, #0
 8006752:	49a8      	ldr	r1, [pc, #672]	; (80069f4 <_dtoa_r+0x8b4>)
 8006754:	f7f9 fd08 	bl	8000168 <__aeabi_dsub>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4630      	mov	r0, r6
 800675e:	4639      	mov	r1, r7
 8006760:	f7fa f92c 	bl	80009bc <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f43f af1e 	beq.w	80065a6 <_dtoa_r+0x466>
 800676a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800676c:	1e7b      	subs	r3, r7, #1
 800676e:	9314      	str	r3, [sp, #80]	; 0x50
 8006770:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006774:	2b30      	cmp	r3, #48	; 0x30
 8006776:	d0f8      	beq.n	800676a <_dtoa_r+0x62a>
 8006778:	46c3      	mov	fp, r8
 800677a:	e03b      	b.n	80067f4 <_dtoa_r+0x6b4>
 800677c:	4b9e      	ldr	r3, [pc, #632]	; (80069f8 <_dtoa_r+0x8b8>)
 800677e:	f7f9 feab 	bl	80004d8 <__aeabi_dmul>
 8006782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006786:	e7bc      	b.n	8006702 <_dtoa_r+0x5c2>
 8006788:	9f03      	ldr	r7, [sp, #12]
 800678a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800678e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006792:	4640      	mov	r0, r8
 8006794:	4649      	mov	r1, r9
 8006796:	f7f9 ffc9 	bl	800072c <__aeabi_ddiv>
 800679a:	f7fa f94d 	bl	8000a38 <__aeabi_d2iz>
 800679e:	4604      	mov	r4, r0
 80067a0:	f7f9 fe30 	bl	8000404 <__aeabi_i2d>
 80067a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4640      	mov	r0, r8
 80067b2:	4649      	mov	r1, r9
 80067b4:	f7f9 fcd8 	bl	8000168 <__aeabi_dsub>
 80067b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80067bc:	f807 6b01 	strb.w	r6, [r7], #1
 80067c0:	9e03      	ldr	r6, [sp, #12]
 80067c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80067c6:	1bbe      	subs	r6, r7, r6
 80067c8:	45b4      	cmp	ip, r6
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	d136      	bne.n	800683e <_dtoa_r+0x6fe>
 80067d0:	f7f9 fccc 	bl	800016c <__adddf3>
 80067d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d8:	4680      	mov	r8, r0
 80067da:	4689      	mov	r9, r1
 80067dc:	f7fa f90c 	bl	80009f8 <__aeabi_dcmpgt>
 80067e0:	bb58      	cbnz	r0, 800683a <_dtoa_r+0x6fa>
 80067e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7fa f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80067ee:	b108      	cbz	r0, 80067f4 <_dtoa_r+0x6b4>
 80067f0:	07e3      	lsls	r3, r4, #31
 80067f2:	d422      	bmi.n	800683a <_dtoa_r+0x6fa>
 80067f4:	4651      	mov	r1, sl
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fbc2 	bl	8006f80 <_Bfree>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006800:	703b      	strb	r3, [r7, #0]
 8006802:	f10b 0301 	add.w	r3, fp, #1
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800680a:	2b00      	cmp	r3, #0
 800680c:	f43f ace6 	beq.w	80061dc <_dtoa_r+0x9c>
 8006810:	601f      	str	r7, [r3, #0]
 8006812:	e4e3      	b.n	80061dc <_dtoa_r+0x9c>
 8006814:	4627      	mov	r7, r4
 8006816:	463b      	mov	r3, r7
 8006818:	461f      	mov	r7, r3
 800681a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800681e:	2a39      	cmp	r2, #57	; 0x39
 8006820:	d107      	bne.n	8006832 <_dtoa_r+0x6f2>
 8006822:	9a03      	ldr	r2, [sp, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d1f7      	bne.n	8006818 <_dtoa_r+0x6d8>
 8006828:	2230      	movs	r2, #48	; 0x30
 800682a:	9903      	ldr	r1, [sp, #12]
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	700a      	strb	r2, [r1, #0]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	3201      	adds	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e79e      	b.n	8006778 <_dtoa_r+0x638>
 800683a:	46d8      	mov	r8, fp
 800683c:	e7eb      	b.n	8006816 <_dtoa_r+0x6d6>
 800683e:	2200      	movs	r2, #0
 8006840:	4b6d      	ldr	r3, [pc, #436]	; (80069f8 <_dtoa_r+0x8b8>)
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	2200      	movs	r2, #0
 8006848:	2300      	movs	r3, #0
 800684a:	4680      	mov	r8, r0
 800684c:	4689      	mov	r9, r1
 800684e:	f7fa f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8006852:	2800      	cmp	r0, #0
 8006854:	d09b      	beq.n	800678e <_dtoa_r+0x64e>
 8006856:	e7cd      	b.n	80067f4 <_dtoa_r+0x6b4>
 8006858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800685a:	2a00      	cmp	r2, #0
 800685c:	f000 80c4 	beq.w	80069e8 <_dtoa_r+0x8a8>
 8006860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006862:	2a01      	cmp	r2, #1
 8006864:	f300 80a8 	bgt.w	80069b8 <_dtoa_r+0x878>
 8006868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800686a:	2a00      	cmp	r2, #0
 800686c:	f000 80a0 	beq.w	80069b0 <_dtoa_r+0x870>
 8006870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006874:	464f      	mov	r7, r9
 8006876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687a:	2101      	movs	r1, #1
 800687c:	441a      	add	r2, r3
 800687e:	4628      	mov	r0, r5
 8006880:	4499      	add	r9, r3
 8006882:	9209      	str	r2, [sp, #36]	; 0x24
 8006884:	f000 fc32 	bl	80070ec <__i2b>
 8006888:	4606      	mov	r6, r0
 800688a:	b15f      	cbz	r7, 80068a4 <_dtoa_r+0x764>
 800688c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	dd08      	ble.n	80068a4 <_dtoa_r+0x764>
 8006892:	42bb      	cmp	r3, r7
 8006894:	bfa8      	it	ge
 8006896:	463b      	movge	r3, r7
 8006898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689a:	eba9 0903 	sub.w	r9, r9, r3
 800689e:	1aff      	subs	r7, r7, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	9309      	str	r3, [sp, #36]	; 0x24
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	b1f3      	cbz	r3, 80068e6 <_dtoa_r+0x7a6>
 80068a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80a0 	beq.w	80069f0 <_dtoa_r+0x8b0>
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	dd10      	ble.n	80068d6 <_dtoa_r+0x796>
 80068b4:	4631      	mov	r1, r6
 80068b6:	4622      	mov	r2, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fcd5 	bl	8007268 <__pow5mult>
 80068be:	4652      	mov	r2, sl
 80068c0:	4601      	mov	r1, r0
 80068c2:	4606      	mov	r6, r0
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 fc27 	bl	8007118 <__multiply>
 80068ca:	4680      	mov	r8, r0
 80068cc:	4651      	mov	r1, sl
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fb56 	bl	8006f80 <_Bfree>
 80068d4:	46c2      	mov	sl, r8
 80068d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d8:	1b1a      	subs	r2, r3, r4
 80068da:	d004      	beq.n	80068e6 <_dtoa_r+0x7a6>
 80068dc:	4651      	mov	r1, sl
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 fcc2 	bl	8007268 <__pow5mult>
 80068e4:	4682      	mov	sl, r0
 80068e6:	2101      	movs	r1, #1
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 fbff 	bl	80070ec <__i2b>
 80068ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f0:	4604      	mov	r4, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f340 8082 	ble.w	80069fc <_dtoa_r+0x8bc>
 80068f8:	461a      	mov	r2, r3
 80068fa:	4601      	mov	r1, r0
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 fcb3 	bl	8007268 <__pow5mult>
 8006902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006904:	4604      	mov	r4, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	dd7b      	ble.n	8006a02 <_dtoa_r+0x8c2>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006914:	6918      	ldr	r0, [r3, #16]
 8006916:	f000 fb9b 	bl	8007050 <__hi0bits>
 800691a:	f1c0 0020 	rsb	r0, r0, #32
 800691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006920:	4418      	add	r0, r3
 8006922:	f010 001f 	ands.w	r0, r0, #31
 8006926:	f000 8092 	beq.w	8006a4e <_dtoa_r+0x90e>
 800692a:	f1c0 0320 	rsb	r3, r0, #32
 800692e:	2b04      	cmp	r3, #4
 8006930:	f340 8085 	ble.w	8006a3e <_dtoa_r+0x8fe>
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	f1c0 001c 	rsb	r0, r0, #28
 800693a:	4403      	add	r3, r0
 800693c:	4481      	add	r9, r0
 800693e:	4407      	add	r7, r0
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	dd05      	ble.n	8006954 <_dtoa_r+0x814>
 8006948:	4651      	mov	r1, sl
 800694a:	464a      	mov	r2, r9
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fce5 	bl	800731c <__lshift>
 8006952:	4682      	mov	sl, r0
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	dd05      	ble.n	8006966 <_dtoa_r+0x826>
 800695a:	4621      	mov	r1, r4
 800695c:	461a      	mov	r2, r3
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fcdc 	bl	800731c <__lshift>
 8006964:	4604      	mov	r4, r0
 8006966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d072      	beq.n	8006a52 <_dtoa_r+0x912>
 800696c:	4621      	mov	r1, r4
 800696e:	4650      	mov	r0, sl
 8006970:	f000 fd40 	bl	80073f4 <__mcmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	da6c      	bge.n	8006a52 <_dtoa_r+0x912>
 8006978:	2300      	movs	r3, #0
 800697a:	4651      	mov	r1, sl
 800697c:	220a      	movs	r2, #10
 800697e:	4628      	mov	r0, r5
 8006980:	f000 fb20 	bl	8006fc4 <__multadd>
 8006984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006986:	4682      	mov	sl, r0
 8006988:	f10b 3bff 	add.w	fp, fp, #4294967295
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 81ac 	beq.w	8006cea <_dtoa_r+0xbaa>
 8006992:	2300      	movs	r3, #0
 8006994:	4631      	mov	r1, r6
 8006996:	220a      	movs	r2, #10
 8006998:	4628      	mov	r0, r5
 800699a:	f000 fb13 	bl	8006fc4 <__multadd>
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	4606      	mov	r6, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f300 8093 	bgt.w	8006ace <_dtoa_r+0x98e>
 80069a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	dc59      	bgt.n	8006a62 <_dtoa_r+0x922>
 80069ae:	e08e      	b.n	8006ace <_dtoa_r+0x98e>
 80069b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069b6:	e75d      	b.n	8006874 <_dtoa_r+0x734>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	1e5c      	subs	r4, r3, #1
 80069bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069be:	42a3      	cmp	r3, r4
 80069c0:	bfbf      	itttt	lt
 80069c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80069c6:	1ae3      	sublt	r3, r4, r3
 80069c8:	18d2      	addlt	r2, r2, r3
 80069ca:	bfa8      	it	ge
 80069cc:	1b1c      	subge	r4, r3, r4
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	bfbe      	ittt	lt
 80069d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80069d6:	2400      	movlt	r4, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfb5      	itete	lt
 80069dc:	eba9 0703 	sublt.w	r7, r9, r3
 80069e0:	464f      	movge	r7, r9
 80069e2:	2300      	movlt	r3, #0
 80069e4:	9b08      	ldrge	r3, [sp, #32]
 80069e6:	e747      	b.n	8006878 <_dtoa_r+0x738>
 80069e8:	464f      	mov	r7, r9
 80069ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069ee:	e74c      	b.n	800688a <_dtoa_r+0x74a>
 80069f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f2:	e773      	b.n	80068dc <_dtoa_r+0x79c>
 80069f4:	3fe00000 	.word	0x3fe00000
 80069f8:	40240000 	.word	0x40240000
 80069fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	dc18      	bgt.n	8006a34 <_dtoa_r+0x8f4>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	b9b3      	cbnz	r3, 8006a34 <_dtoa_r+0x8f4>
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a0c:	b993      	cbnz	r3, 8006a34 <_dtoa_r+0x8f4>
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a14:	0d1b      	lsrs	r3, r3, #20
 8006a16:	051b      	lsls	r3, r3, #20
 8006a18:	b17b      	cbz	r3, 8006a3a <_dtoa_r+0x8fa>
 8006a1a:	f04f 0801 	mov.w	r8, #1
 8006a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a20:	f109 0901 	add.w	r9, r9, #1
 8006a24:	3301      	adds	r3, #1
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f47f af6f 	bne.w	800690e <_dtoa_r+0x7ce>
 8006a30:	2001      	movs	r0, #1
 8006a32:	e774      	b.n	800691e <_dtoa_r+0x7de>
 8006a34:	f04f 0800 	mov.w	r8, #0
 8006a38:	e7f6      	b.n	8006a28 <_dtoa_r+0x8e8>
 8006a3a:	4698      	mov	r8, r3
 8006a3c:	e7f4      	b.n	8006a28 <_dtoa_r+0x8e8>
 8006a3e:	d080      	beq.n	8006942 <_dtoa_r+0x802>
 8006a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a42:	331c      	adds	r3, #28
 8006a44:	441a      	add	r2, r3
 8006a46:	4499      	add	r9, r3
 8006a48:	441f      	add	r7, r3
 8006a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a4c:	e779      	b.n	8006942 <_dtoa_r+0x802>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	e7f6      	b.n	8006a40 <_dtoa_r+0x900>
 8006a52:	9b08      	ldr	r3, [sp, #32]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dc34      	bgt.n	8006ac2 <_dtoa_r+0x982>
 8006a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	dd31      	ble.n	8006ac2 <_dtoa_r+0x982>
 8006a5e:	9b08      	ldr	r3, [sp, #32]
 8006a60:	9306      	str	r3, [sp, #24]
 8006a62:	9b06      	ldr	r3, [sp, #24]
 8006a64:	b963      	cbnz	r3, 8006a80 <_dtoa_r+0x940>
 8006a66:	4621      	mov	r1, r4
 8006a68:	2205      	movs	r2, #5
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 faaa 	bl	8006fc4 <__multadd>
 8006a70:	4601      	mov	r1, r0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4650      	mov	r0, sl
 8006a76:	f000 fcbd 	bl	80073f4 <__mcmp>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f73f adbf 	bgt.w	80065fe <_dtoa_r+0x4be>
 8006a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a82:	9f03      	ldr	r7, [sp, #12]
 8006a84:	ea6f 0b03 	mvn.w	fp, r3
 8006a88:	f04f 0800 	mov.w	r8, #0
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fa76 	bl	8006f80 <_Bfree>
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	f43f aead 	beq.w	80067f4 <_dtoa_r+0x6b4>
 8006a9a:	f1b8 0f00 	cmp.w	r8, #0
 8006a9e:	d005      	beq.n	8006aac <_dtoa_r+0x96c>
 8006aa0:	45b0      	cmp	r8, r6
 8006aa2:	d003      	beq.n	8006aac <_dtoa_r+0x96c>
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 fa6a 	bl	8006f80 <_Bfree>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fa66 	bl	8006f80 <_Bfree>
 8006ab4:	e69e      	b.n	80067f4 <_dtoa_r+0x6b4>
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	4626      	mov	r6, r4
 8006aba:	e7e1      	b.n	8006a80 <_dtoa_r+0x940>
 8006abc:	46c3      	mov	fp, r8
 8006abe:	4626      	mov	r6, r4
 8006ac0:	e59d      	b.n	80065fe <_dtoa_r+0x4be>
 8006ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80c8 	beq.w	8006c5a <_dtoa_r+0xb1a>
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	9306      	str	r3, [sp, #24]
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	dd05      	ble.n	8006ade <_dtoa_r+0x99e>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 fc20 	bl	800731c <__lshift>
 8006adc:	4606      	mov	r6, r0
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d05b      	beq.n	8006b9c <_dtoa_r+0xa5c>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	6871      	ldr	r1, [r6, #4]
 8006ae8:	f000 fa0a 	bl	8006f00 <_Balloc>
 8006aec:	4607      	mov	r7, r0
 8006aee:	b928      	cbnz	r0, 8006afc <_dtoa_r+0x9bc>
 8006af0:	4602      	mov	r2, r0
 8006af2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006af6:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <_dtoa_r+0xbbc>)
 8006af8:	f7ff bb36 	b.w	8006168 <_dtoa_r+0x28>
 8006afc:	6932      	ldr	r2, [r6, #16]
 8006afe:	f106 010c 	add.w	r1, r6, #12
 8006b02:	3202      	adds	r2, #2
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	300c      	adds	r0, #12
 8006b08:	f000 fe2c 	bl	8007764 <memcpy>
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4628      	mov	r0, r5
 8006b12:	f000 fc03 	bl	800731c <__lshift>
 8006b16:	46b0      	mov	r8, r6
 8006b18:	4606      	mov	r6, r0
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	9a03      	ldr	r2, [sp, #12]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	9308      	str	r3, [sp, #32]
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	4413      	add	r3, r2
 8006b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b28:	9b04      	ldr	r3, [sp, #16]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	4621      	mov	r1, r4
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4650      	mov	r0, sl
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	f7ff fa76 	bl	800602a <quorem>
 8006b3e:	4641      	mov	r1, r8
 8006b40:	9006      	str	r0, [sp, #24]
 8006b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b46:	4650      	mov	r0, sl
 8006b48:	f000 fc54 	bl	80073f4 <__mcmp>
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	9009      	str	r0, [sp, #36]	; 0x24
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 fc6a 	bl	800742c <__mdiff>
 8006b58:	68c2      	ldr	r2, [r0, #12]
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	bb02      	cbnz	r2, 8006ba0 <_dtoa_r+0xa60>
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4650      	mov	r0, sl
 8006b62:	f000 fc47 	bl	80073f4 <__mcmp>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	920c      	str	r2, [sp, #48]	; 0x30
 8006b6e:	f000 fa07 	bl	8006f80 <_Bfree>
 8006b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b76:	9f08      	ldr	r7, [sp, #32]
 8006b78:	ea43 0102 	orr.w	r1, r3, r2
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7e:	4319      	orrs	r1, r3
 8006b80:	d110      	bne.n	8006ba4 <_dtoa_r+0xa64>
 8006b82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b86:	d029      	beq.n	8006bdc <_dtoa_r+0xa9c>
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd02      	ble.n	8006b94 <_dtoa_r+0xa54>
 8006b8e:	9b06      	ldr	r3, [sp, #24]
 8006b90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	f883 9000 	strb.w	r9, [r3]
 8006b9a:	e777      	b.n	8006a8c <_dtoa_r+0x94c>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	e7ba      	b.n	8006b16 <_dtoa_r+0x9d6>
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	e7e1      	b.n	8006b68 <_dtoa_r+0xa28>
 8006ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	db04      	blt.n	8006bb4 <_dtoa_r+0xa74>
 8006baa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bac:	430b      	orrs	r3, r1
 8006bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	d120      	bne.n	8006bf6 <_dtoa_r+0xab6>
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	dded      	ble.n	8006b94 <_dtoa_r+0xa54>
 8006bb8:	4651      	mov	r1, sl
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f000 fbad 	bl	800731c <__lshift>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	f000 fc15 	bl	80073f4 <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	dc03      	bgt.n	8006bd6 <_dtoa_r+0xa96>
 8006bce:	d1e1      	bne.n	8006b94 <_dtoa_r+0xa54>
 8006bd0:	f019 0f01 	tst.w	r9, #1
 8006bd4:	d0de      	beq.n	8006b94 <_dtoa_r+0xa54>
 8006bd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bda:	d1d8      	bne.n	8006b8e <_dtoa_r+0xa4e>
 8006bdc:	2339      	movs	r3, #57	; 0x39
 8006bde:	9a04      	ldr	r2, [sp, #16]
 8006be0:	7013      	strb	r3, [r2, #0]
 8006be2:	463b      	mov	r3, r7
 8006be4:	461f      	mov	r7, r3
 8006be6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	2a39      	cmp	r2, #57	; 0x39
 8006bee:	d06b      	beq.n	8006cc8 <_dtoa_r+0xb88>
 8006bf0:	3201      	adds	r2, #1
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	e74a      	b.n	8006a8c <_dtoa_r+0x94c>
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	dd07      	ble.n	8006c0a <_dtoa_r+0xaca>
 8006bfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bfe:	d0ed      	beq.n	8006bdc <_dtoa_r+0xa9c>
 8006c00:	9a04      	ldr	r2, [sp, #16]
 8006c02:	f109 0301 	add.w	r3, r9, #1
 8006c06:	7013      	strb	r3, [r2, #0]
 8006c08:	e740      	b.n	8006a8c <_dtoa_r+0x94c>
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c0e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d042      	beq.n	8006c9c <_dtoa_r+0xb5c>
 8006c16:	4651      	mov	r1, sl
 8006c18:	2300      	movs	r3, #0
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f9d1 	bl	8006fc4 <__multadd>
 8006c22:	45b0      	cmp	r8, r6
 8006c24:	4682      	mov	sl, r0
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	f04f 020a 	mov.w	r2, #10
 8006c2e:	4641      	mov	r1, r8
 8006c30:	4628      	mov	r0, r5
 8006c32:	d107      	bne.n	8006c44 <_dtoa_r+0xb04>
 8006c34:	f000 f9c6 	bl	8006fc4 <__multadd>
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	e775      	b.n	8006b30 <_dtoa_r+0x9f0>
 8006c44:	f000 f9be 	bl	8006fc4 <__multadd>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	220a      	movs	r2, #10
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 f9b7 	bl	8006fc4 <__multadd>
 8006c56:	4606      	mov	r6, r0
 8006c58:	e7f0      	b.n	8006c3c <_dtoa_r+0xafc>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	9306      	str	r3, [sp, #24]
 8006c5e:	9f03      	ldr	r7, [sp, #12]
 8006c60:	4621      	mov	r1, r4
 8006c62:	4650      	mov	r0, sl
 8006c64:	f7ff f9e1 	bl	800602a <quorem>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c6e:	f807 9b01 	strb.w	r9, [r7], #1
 8006c72:	1afa      	subs	r2, r7, r3
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	dd07      	ble.n	8006c8a <_dtoa_r+0xb4a>
 8006c7a:	4651      	mov	r1, sl
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	220a      	movs	r2, #10
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f99f 	bl	8006fc4 <__multadd>
 8006c86:	4682      	mov	sl, r0
 8006c88:	e7ea      	b.n	8006c60 <_dtoa_r+0xb20>
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	f04f 0800 	mov.w	r8, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfcc      	ite	gt
 8006c94:	461f      	movgt	r7, r3
 8006c96:	2701      	movle	r7, #1
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	441f      	add	r7, r3
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 fb3b 	bl	800731c <__lshift>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4682      	mov	sl, r0
 8006caa:	f000 fba3 	bl	80073f4 <__mcmp>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	dc97      	bgt.n	8006be2 <_dtoa_r+0xaa2>
 8006cb2:	d102      	bne.n	8006cba <_dtoa_r+0xb7a>
 8006cb4:	f019 0f01 	tst.w	r9, #1
 8006cb8:	d193      	bne.n	8006be2 <_dtoa_r+0xaa2>
 8006cba:	463b      	mov	r3, r7
 8006cbc:	461f      	mov	r7, r3
 8006cbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cc2:	2a30      	cmp	r2, #48	; 0x30
 8006cc4:	d0fa      	beq.n	8006cbc <_dtoa_r+0xb7c>
 8006cc6:	e6e1      	b.n	8006a8c <_dtoa_r+0x94c>
 8006cc8:	9a03      	ldr	r2, [sp, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d18a      	bne.n	8006be4 <_dtoa_r+0xaa4>
 8006cce:	2331      	movs	r3, #49	; 0x31
 8006cd0:	f10b 0b01 	add.w	fp, fp, #1
 8006cd4:	e797      	b.n	8006c06 <_dtoa_r+0xac6>
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <_dtoa_r+0xbc0>)
 8006cd8:	f7ff ba9f 	b.w	800621a <_dtoa_r+0xda>
 8006cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f47f aa77 	bne.w	80061d2 <_dtoa_r+0x92>
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <_dtoa_r+0xbc4>)
 8006ce6:	f7ff ba98 	b.w	800621a <_dtoa_r+0xda>
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dcb6      	bgt.n	8006c5e <_dtoa_r+0xb1e>
 8006cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	f73f aeb5 	bgt.w	8006a62 <_dtoa_r+0x922>
 8006cf8:	e7b1      	b.n	8006c5e <_dtoa_r+0xb1e>
 8006cfa:	bf00      	nop
 8006cfc:	08007e92 	.word	0x08007e92
 8006d00:	08007df2 	.word	0x08007df2
 8006d04:	08007e16 	.word	0x08007e16

08006d08 <_free_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d040      	beq.n	8006d92 <_free_r+0x8a>
 8006d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d14:	1f0c      	subs	r4, r1, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	18e4      	addlt	r4, r4, r3
 8006d1c:	f000 f8e4 	bl	8006ee8 <__malloc_lock>
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <_free_r+0x8c>)
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	b933      	cbnz	r3, 8006d34 <_free_r+0x2c>
 8006d26:	6063      	str	r3, [r4, #4]
 8006d28:	6014      	str	r4, [r2, #0]
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d30:	f000 b8e0 	b.w	8006ef4 <__malloc_unlock>
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	d908      	bls.n	8006d4a <_free_r+0x42>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	1821      	adds	r1, r4, r0
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	bf01      	itttt	eq
 8006d40:	6819      	ldreq	r1, [r3, #0]
 8006d42:	685b      	ldreq	r3, [r3, #4]
 8006d44:	1809      	addeq	r1, r1, r0
 8006d46:	6021      	streq	r1, [r4, #0]
 8006d48:	e7ed      	b.n	8006d26 <_free_r+0x1e>
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b10b      	cbz	r3, 8006d54 <_free_r+0x4c>
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d9fa      	bls.n	8006d4a <_free_r+0x42>
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	1850      	adds	r0, r2, r1
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	d10b      	bne.n	8006d74 <_free_r+0x6c>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	4401      	add	r1, r0
 8006d60:	1850      	adds	r0, r2, r1
 8006d62:	4283      	cmp	r3, r0
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	d1e0      	bne.n	8006d2a <_free_r+0x22>
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4408      	add	r0, r1
 8006d6e:	6010      	str	r0, [r2, #0]
 8006d70:	6053      	str	r3, [r2, #4]
 8006d72:	e7da      	b.n	8006d2a <_free_r+0x22>
 8006d74:	d902      	bls.n	8006d7c <_free_r+0x74>
 8006d76:	230c      	movs	r3, #12
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	e7d6      	b.n	8006d2a <_free_r+0x22>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	1821      	adds	r1, r4, r0
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf01      	itttt	eq
 8006d84:	6819      	ldreq	r1, [r3, #0]
 8006d86:	685b      	ldreq	r3, [r3, #4]
 8006d88:	1809      	addeq	r1, r1, r0
 8006d8a:	6021      	streq	r1, [r4, #0]
 8006d8c:	6063      	str	r3, [r4, #4]
 8006d8e:	6054      	str	r4, [r2, #4]
 8006d90:	e7cb      	b.n	8006d2a <_free_r+0x22>
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200004b8 	.word	0x200004b8

08006d98 <malloc>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <malloc+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 b823 	b.w	8006de8 <_malloc_r>
 8006da2:	bf00      	nop
 8006da4:	20000078 	.word	0x20000078

08006da8 <sbrk_aligned>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4e0e      	ldr	r6, [pc, #56]	; (8006de4 <sbrk_aligned+0x3c>)
 8006dac:	460c      	mov	r4, r1
 8006dae:	6831      	ldr	r1, [r6, #0]
 8006db0:	4605      	mov	r5, r0
 8006db2:	b911      	cbnz	r1, 8006dba <sbrk_aligned+0x12>
 8006db4:	f000 fcc6 	bl	8007744 <_sbrk_r>
 8006db8:	6030      	str	r0, [r6, #0]
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 fcc1 	bl	8007744 <_sbrk_r>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d00a      	beq.n	8006ddc <sbrk_aligned+0x34>
 8006dc6:	1cc4      	adds	r4, r0, #3
 8006dc8:	f024 0403 	bic.w	r4, r4, #3
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d007      	beq.n	8006de0 <sbrk_aligned+0x38>
 8006dd0:	1a21      	subs	r1, r4, r0
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fcb6 	bl	8007744 <_sbrk_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d101      	bne.n	8006de0 <sbrk_aligned+0x38>
 8006ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8006de0:	4620      	mov	r0, r4
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	200004bc 	.word	0x200004bc

08006de8 <_malloc_r>:
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	1ccd      	adds	r5, r1, #3
 8006dee:	f025 0503 	bic.w	r5, r5, #3
 8006df2:	3508      	adds	r5, #8
 8006df4:	2d0c      	cmp	r5, #12
 8006df6:	bf38      	it	cc
 8006df8:	250c      	movcc	r5, #12
 8006dfa:	2d00      	cmp	r5, #0
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	db01      	blt.n	8006e04 <_malloc_r+0x1c>
 8006e00:	42a9      	cmp	r1, r5
 8006e02:	d905      	bls.n	8006e10 <_malloc_r+0x28>
 8006e04:	230c      	movs	r3, #12
 8006e06:	2600      	movs	r6, #0
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ee4 <_malloc_r+0xfc>
 8006e14:	f000 f868 	bl	8006ee8 <__malloc_lock>
 8006e18:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	bb5c      	cbnz	r4, 8006e78 <_malloc_r+0x90>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ffc0 	bl	8006da8 <sbrk_aligned>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	d155      	bne.n	8006eda <_malloc_r+0xf2>
 8006e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e32:	4626      	mov	r6, r4
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	d145      	bne.n	8006ec4 <_malloc_r+0xdc>
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	d048      	beq.n	8006ece <_malloc_r+0xe6>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4638      	mov	r0, r7
 8006e42:	eb04 0903 	add.w	r9, r4, r3
 8006e46:	f000 fc7d 	bl	8007744 <_sbrk_r>
 8006e4a:	4581      	cmp	r9, r0
 8006e4c:	d13f      	bne.n	8006ece <_malloc_r+0xe6>
 8006e4e:	6821      	ldr	r1, [r4, #0]
 8006e50:	4638      	mov	r0, r7
 8006e52:	1a6d      	subs	r5, r5, r1
 8006e54:	4629      	mov	r1, r5
 8006e56:	f7ff ffa7 	bl	8006da8 <sbrk_aligned>
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d037      	beq.n	8006ece <_malloc_r+0xe6>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	442b      	add	r3, r5
 8006e62:	6023      	str	r3, [r4, #0]
 8006e64:	f8d8 3000 	ldr.w	r3, [r8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d038      	beq.n	8006ede <_malloc_r+0xf6>
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	42a2      	cmp	r2, r4
 8006e70:	d12b      	bne.n	8006eca <_malloc_r+0xe2>
 8006e72:	2200      	movs	r2, #0
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e00f      	b.n	8006e98 <_malloc_r+0xb0>
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	1b52      	subs	r2, r2, r5
 8006e7c:	d41f      	bmi.n	8006ebe <_malloc_r+0xd6>
 8006e7e:	2a0b      	cmp	r2, #11
 8006e80:	d917      	bls.n	8006eb2 <_malloc_r+0xca>
 8006e82:	1961      	adds	r1, r4, r5
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	6025      	str	r5, [r4, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	6059      	strne	r1, [r3, #4]
 8006e8c:	6863      	ldr	r3, [r4, #4]
 8006e8e:	bf08      	it	eq
 8006e90:	f8c8 1000 	streq.w	r1, [r8]
 8006e94:	5162      	str	r2, [r4, r5]
 8006e96:	604b      	str	r3, [r1, #4]
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f104 060b 	add.w	r6, r4, #11
 8006e9e:	f000 f829 	bl	8006ef4 <__malloc_unlock>
 8006ea2:	f026 0607 	bic.w	r6, r6, #7
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	1af2      	subs	r2, r6, r3
 8006eaa:	d0ae      	beq.n	8006e0a <_malloc_r+0x22>
 8006eac:	1b9b      	subs	r3, r3, r6
 8006eae:	50a3      	str	r3, [r4, r2]
 8006eb0:	e7ab      	b.n	8006e0a <_malloc_r+0x22>
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	6862      	ldr	r2, [r4, #4]
 8006eb6:	d1dd      	bne.n	8006e74 <_malloc_r+0x8c>
 8006eb8:	f8c8 2000 	str.w	r2, [r8]
 8006ebc:	e7ec      	b.n	8006e98 <_malloc_r+0xb0>
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	6864      	ldr	r4, [r4, #4]
 8006ec2:	e7ac      	b.n	8006e1e <_malloc_r+0x36>
 8006ec4:	4634      	mov	r4, r6
 8006ec6:	6876      	ldr	r6, [r6, #4]
 8006ec8:	e7b4      	b.n	8006e34 <_malloc_r+0x4c>
 8006eca:	4613      	mov	r3, r2
 8006ecc:	e7cc      	b.n	8006e68 <_malloc_r+0x80>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	f000 f80e 	bl	8006ef4 <__malloc_unlock>
 8006ed8:	e797      	b.n	8006e0a <_malloc_r+0x22>
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	e7dc      	b.n	8006e98 <_malloc_r+0xb0>
 8006ede:	605b      	str	r3, [r3, #4]
 8006ee0:	deff      	udf	#255	; 0xff
 8006ee2:	bf00      	nop
 8006ee4:	200004b8 	.word	0x200004b8

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f7ff b88e 	b.w	800600a <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	200004b4 	.word	0x200004b4

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f7ff b889 	b.w	800600c <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	200004b4 	.word	0x200004b4

08006f00 <_Balloc>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	69c6      	ldr	r6, [r0, #28]
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	b976      	cbnz	r6, 8006f28 <_Balloc+0x28>
 8006f0a:	2010      	movs	r0, #16
 8006f0c:	f7ff ff44 	bl	8006d98 <malloc>
 8006f10:	4602      	mov	r2, r0
 8006f12:	61e0      	str	r0, [r4, #28]
 8006f14:	b920      	cbnz	r0, 8006f20 <_Balloc+0x20>
 8006f16:	216b      	movs	r1, #107	; 0x6b
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <_Balloc+0x78>)
 8006f1a:	4818      	ldr	r0, [pc, #96]	; (8006f7c <_Balloc+0x7c>)
 8006f1c:	f000 fc30 	bl	8007780 <__assert_func>
 8006f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f24:	6006      	str	r6, [r0, #0]
 8006f26:	60c6      	str	r6, [r0, #12]
 8006f28:	69e6      	ldr	r6, [r4, #28]
 8006f2a:	68f3      	ldr	r3, [r6, #12]
 8006f2c:	b183      	cbz	r3, 8006f50 <_Balloc+0x50>
 8006f2e:	69e3      	ldr	r3, [r4, #28]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f36:	b9b8      	cbnz	r0, 8006f68 <_Balloc+0x68>
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f3e:	1d72      	adds	r2, r6, #5
 8006f40:	4620      	mov	r0, r4
 8006f42:	0092      	lsls	r2, r2, #2
 8006f44:	f000 fc3a 	bl	80077bc <_calloc_r>
 8006f48:	b160      	cbz	r0, 8006f64 <_Balloc+0x64>
 8006f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f4e:	e00e      	b.n	8006f6e <_Balloc+0x6e>
 8006f50:	2221      	movs	r2, #33	; 0x21
 8006f52:	2104      	movs	r1, #4
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fc31 	bl	80077bc <_calloc_r>
 8006f5a:	69e3      	ldr	r3, [r4, #28]
 8006f5c:	60f0      	str	r0, [r6, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <_Balloc+0x2e>
 8006f64:	2000      	movs	r0, #0
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	6802      	ldr	r2, [r0, #0]
 8006f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f74:	e7f7      	b.n	8006f66 <_Balloc+0x66>
 8006f76:	bf00      	nop
 8006f78:	08007e23 	.word	0x08007e23
 8006f7c:	08007ea3 	.word	0x08007ea3

08006f80 <_Bfree>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	69c6      	ldr	r6, [r0, #28]
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	b976      	cbnz	r6, 8006fa8 <_Bfree+0x28>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f7ff ff04 	bl	8006d98 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	61e8      	str	r0, [r5, #28]
 8006f94:	b920      	cbnz	r0, 8006fa0 <_Bfree+0x20>
 8006f96:	218f      	movs	r1, #143	; 0x8f
 8006f98:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <_Bfree+0x3c>)
 8006f9a:	4809      	ldr	r0, [pc, #36]	; (8006fc0 <_Bfree+0x40>)
 8006f9c:	f000 fbf0 	bl	8007780 <__assert_func>
 8006fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa4:	6006      	str	r6, [r0, #0]
 8006fa6:	60c6      	str	r6, [r0, #12]
 8006fa8:	b13c      	cbz	r4, 8006fba <_Bfree+0x3a>
 8006faa:	69eb      	ldr	r3, [r5, #28]
 8006fac:	6862      	ldr	r2, [r4, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fb4:	6021      	str	r1, [r4, #0]
 8006fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	08007e23 	.word	0x08007e23
 8006fc0:	08007ea3 	.word	0x08007ea3

08006fc4 <__multadd>:
 8006fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	461e      	mov	r6, r3
 8006fce:	2000      	movs	r0, #0
 8006fd0:	690d      	ldr	r5, [r1, #16]
 8006fd2:	f101 0c14 	add.w	ip, r1, #20
 8006fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8006fda:	3001      	adds	r0, #1
 8006fdc:	b299      	uxth	r1, r3
 8006fde:	fb02 6101 	mla	r1, r2, r1, r6
 8006fe2:	0c1e      	lsrs	r6, r3, #16
 8006fe4:	0c0b      	lsrs	r3, r1, #16
 8006fe6:	fb02 3306 	mla	r3, r2, r6, r3
 8006fea:	b289      	uxth	r1, r1
 8006fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ff0:	4285      	cmp	r5, r0
 8006ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ff6:	f84c 1b04 	str.w	r1, [ip], #4
 8006ffa:	dcec      	bgt.n	8006fd6 <__multadd+0x12>
 8006ffc:	b30e      	cbz	r6, 8007042 <__multadd+0x7e>
 8006ffe:	68a3      	ldr	r3, [r4, #8]
 8007000:	42ab      	cmp	r3, r5
 8007002:	dc19      	bgt.n	8007038 <__multadd+0x74>
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4638      	mov	r0, r7
 8007008:	3101      	adds	r1, #1
 800700a:	f7ff ff79 	bl	8006f00 <_Balloc>
 800700e:	4680      	mov	r8, r0
 8007010:	b928      	cbnz	r0, 800701e <__multadd+0x5a>
 8007012:	4602      	mov	r2, r0
 8007014:	21ba      	movs	r1, #186	; 0xba
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <__multadd+0x84>)
 8007018:	480c      	ldr	r0, [pc, #48]	; (800704c <__multadd+0x88>)
 800701a:	f000 fbb1 	bl	8007780 <__assert_func>
 800701e:	6922      	ldr	r2, [r4, #16]
 8007020:	f104 010c 	add.w	r1, r4, #12
 8007024:	3202      	adds	r2, #2
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	300c      	adds	r0, #12
 800702a:	f000 fb9b 	bl	8007764 <memcpy>
 800702e:	4621      	mov	r1, r4
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ffa5 	bl	8006f80 <_Bfree>
 8007036:	4644      	mov	r4, r8
 8007038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800703c:	3501      	adds	r5, #1
 800703e:	615e      	str	r6, [r3, #20]
 8007040:	6125      	str	r5, [r4, #16]
 8007042:	4620      	mov	r0, r4
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	08007e92 	.word	0x08007e92
 800704c:	08007ea3 	.word	0x08007ea3

08007050 <__hi0bits>:
 8007050:	0c02      	lsrs	r2, r0, #16
 8007052:	0412      	lsls	r2, r2, #16
 8007054:	4603      	mov	r3, r0
 8007056:	b9ca      	cbnz	r2, 800708c <__hi0bits+0x3c>
 8007058:	0403      	lsls	r3, r0, #16
 800705a:	2010      	movs	r0, #16
 800705c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007060:	bf04      	itt	eq
 8007062:	021b      	lsleq	r3, r3, #8
 8007064:	3008      	addeq	r0, #8
 8007066:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800706a:	bf04      	itt	eq
 800706c:	011b      	lsleq	r3, r3, #4
 800706e:	3004      	addeq	r0, #4
 8007070:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007074:	bf04      	itt	eq
 8007076:	009b      	lsleq	r3, r3, #2
 8007078:	3002      	addeq	r0, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	db05      	blt.n	800708a <__hi0bits+0x3a>
 800707e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007082:	f100 0001 	add.w	r0, r0, #1
 8007086:	bf08      	it	eq
 8007088:	2020      	moveq	r0, #32
 800708a:	4770      	bx	lr
 800708c:	2000      	movs	r0, #0
 800708e:	e7e5      	b.n	800705c <__hi0bits+0xc>

08007090 <__lo0bits>:
 8007090:	6803      	ldr	r3, [r0, #0]
 8007092:	4602      	mov	r2, r0
 8007094:	f013 0007 	ands.w	r0, r3, #7
 8007098:	d00b      	beq.n	80070b2 <__lo0bits+0x22>
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	d421      	bmi.n	80070e2 <__lo0bits+0x52>
 800709e:	0798      	lsls	r0, r3, #30
 80070a0:	bf49      	itett	mi
 80070a2:	085b      	lsrmi	r3, r3, #1
 80070a4:	089b      	lsrpl	r3, r3, #2
 80070a6:	2001      	movmi	r0, #1
 80070a8:	6013      	strmi	r3, [r2, #0]
 80070aa:	bf5c      	itt	pl
 80070ac:	2002      	movpl	r0, #2
 80070ae:	6013      	strpl	r3, [r2, #0]
 80070b0:	4770      	bx	lr
 80070b2:	b299      	uxth	r1, r3
 80070b4:	b909      	cbnz	r1, 80070ba <__lo0bits+0x2a>
 80070b6:	2010      	movs	r0, #16
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	b2d9      	uxtb	r1, r3
 80070bc:	b909      	cbnz	r1, 80070c2 <__lo0bits+0x32>
 80070be:	3008      	adds	r0, #8
 80070c0:	0a1b      	lsrs	r3, r3, #8
 80070c2:	0719      	lsls	r1, r3, #28
 80070c4:	bf04      	itt	eq
 80070c6:	091b      	lsreq	r3, r3, #4
 80070c8:	3004      	addeq	r0, #4
 80070ca:	0799      	lsls	r1, r3, #30
 80070cc:	bf04      	itt	eq
 80070ce:	089b      	lsreq	r3, r3, #2
 80070d0:	3002      	addeq	r0, #2
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d403      	bmi.n	80070de <__lo0bits+0x4e>
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	f100 0001 	add.w	r0, r0, #1
 80070dc:	d003      	beq.n	80070e6 <__lo0bits+0x56>
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4770      	bx	lr
 80070e2:	2000      	movs	r0, #0
 80070e4:	4770      	bx	lr
 80070e6:	2020      	movs	r0, #32
 80070e8:	4770      	bx	lr
	...

080070ec <__i2b>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	460c      	mov	r4, r1
 80070f0:	2101      	movs	r1, #1
 80070f2:	f7ff ff05 	bl	8006f00 <_Balloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	b928      	cbnz	r0, 8007106 <__i2b+0x1a>
 80070fa:	f240 1145 	movw	r1, #325	; 0x145
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <__i2b+0x24>)
 8007100:	4804      	ldr	r0, [pc, #16]	; (8007114 <__i2b+0x28>)
 8007102:	f000 fb3d 	bl	8007780 <__assert_func>
 8007106:	2301      	movs	r3, #1
 8007108:	6144      	str	r4, [r0, #20]
 800710a:	6103      	str	r3, [r0, #16]
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	08007e92 	.word	0x08007e92
 8007114:	08007ea3 	.word	0x08007ea3

08007118 <__multiply>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	4691      	mov	r9, r2
 800711e:	690a      	ldr	r2, [r1, #16]
 8007120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007124:	460c      	mov	r4, r1
 8007126:	429a      	cmp	r2, r3
 8007128:	bfbe      	ittt	lt
 800712a:	460b      	movlt	r3, r1
 800712c:	464c      	movlt	r4, r9
 800712e:	4699      	movlt	r9, r3
 8007130:	6927      	ldr	r7, [r4, #16]
 8007132:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	6861      	ldr	r1, [r4, #4]
 800713a:	eb07 060a 	add.w	r6, r7, sl
 800713e:	42b3      	cmp	r3, r6
 8007140:	b085      	sub	sp, #20
 8007142:	bfb8      	it	lt
 8007144:	3101      	addlt	r1, #1
 8007146:	f7ff fedb 	bl	8006f00 <_Balloc>
 800714a:	b930      	cbnz	r0, 800715a <__multiply+0x42>
 800714c:	4602      	mov	r2, r0
 800714e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007152:	4b43      	ldr	r3, [pc, #268]	; (8007260 <__multiply+0x148>)
 8007154:	4843      	ldr	r0, [pc, #268]	; (8007264 <__multiply+0x14c>)
 8007156:	f000 fb13 	bl	8007780 <__assert_func>
 800715a:	f100 0514 	add.w	r5, r0, #20
 800715e:	462b      	mov	r3, r5
 8007160:	2200      	movs	r2, #0
 8007162:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007166:	4543      	cmp	r3, r8
 8007168:	d321      	bcc.n	80071ae <__multiply+0x96>
 800716a:	f104 0314 	add.w	r3, r4, #20
 800716e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007172:	f109 0314 	add.w	r3, r9, #20
 8007176:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800717a:	9202      	str	r2, [sp, #8]
 800717c:	1b3a      	subs	r2, r7, r4
 800717e:	3a15      	subs	r2, #21
 8007180:	f022 0203 	bic.w	r2, r2, #3
 8007184:	3204      	adds	r2, #4
 8007186:	f104 0115 	add.w	r1, r4, #21
 800718a:	428f      	cmp	r7, r1
 800718c:	bf38      	it	cc
 800718e:	2204      	movcc	r2, #4
 8007190:	9201      	str	r2, [sp, #4]
 8007192:	9a02      	ldr	r2, [sp, #8]
 8007194:	9303      	str	r3, [sp, #12]
 8007196:	429a      	cmp	r2, r3
 8007198:	d80c      	bhi.n	80071b4 <__multiply+0x9c>
 800719a:	2e00      	cmp	r6, #0
 800719c:	dd03      	ble.n	80071a6 <__multiply+0x8e>
 800719e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d05a      	beq.n	800725c <__multiply+0x144>
 80071a6:	6106      	str	r6, [r0, #16]
 80071a8:	b005      	add	sp, #20
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	f843 2b04 	str.w	r2, [r3], #4
 80071b2:	e7d8      	b.n	8007166 <__multiply+0x4e>
 80071b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	d023      	beq.n	8007206 <__multiply+0xee>
 80071be:	46a9      	mov	r9, r5
 80071c0:	f04f 0c00 	mov.w	ip, #0
 80071c4:	f104 0e14 	add.w	lr, r4, #20
 80071c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071cc:	f8d9 1000 	ldr.w	r1, [r9]
 80071d0:	fa1f fb82 	uxth.w	fp, r2
 80071d4:	b289      	uxth	r1, r1
 80071d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80071da:	4461      	add	r1, ip
 80071dc:	f8d9 c000 	ldr.w	ip, [r9]
 80071e0:	0c12      	lsrs	r2, r2, #16
 80071e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071e6:	fb0a c202 	mla	r2, sl, r2, ip
 80071ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ee:	b289      	uxth	r1, r1
 80071f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071f4:	4577      	cmp	r7, lr
 80071f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071fa:	f849 1b04 	str.w	r1, [r9], #4
 80071fe:	d8e3      	bhi.n	80071c8 <__multiply+0xb0>
 8007200:	9a01      	ldr	r2, [sp, #4]
 8007202:	f845 c002 	str.w	ip, [r5, r2]
 8007206:	9a03      	ldr	r2, [sp, #12]
 8007208:	3304      	adds	r3, #4
 800720a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800720e:	f1b9 0f00 	cmp.w	r9, #0
 8007212:	d021      	beq.n	8007258 <__multiply+0x140>
 8007214:	46ae      	mov	lr, r5
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	6829      	ldr	r1, [r5, #0]
 800721c:	f104 0c14 	add.w	ip, r4, #20
 8007220:	f8bc b000 	ldrh.w	fp, [ip]
 8007224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007228:	b289      	uxth	r1, r1
 800722a:	fb09 220b 	mla	r2, r9, fp, r2
 800722e:	4452      	add	r2, sl
 8007230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007234:	f84e 1b04 	str.w	r1, [lr], #4
 8007238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800723c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007240:	f8be 1000 	ldrh.w	r1, [lr]
 8007244:	4567      	cmp	r7, ip
 8007246:	fb09 110a 	mla	r1, r9, sl, r1
 800724a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800724e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007252:	d8e5      	bhi.n	8007220 <__multiply+0x108>
 8007254:	9a01      	ldr	r2, [sp, #4]
 8007256:	50a9      	str	r1, [r5, r2]
 8007258:	3504      	adds	r5, #4
 800725a:	e79a      	b.n	8007192 <__multiply+0x7a>
 800725c:	3e01      	subs	r6, #1
 800725e:	e79c      	b.n	800719a <__multiply+0x82>
 8007260:	08007e92 	.word	0x08007e92
 8007264:	08007ea3 	.word	0x08007ea3

08007268 <__pow5mult>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4615      	mov	r5, r2
 800726e:	f012 0203 	ands.w	r2, r2, #3
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	d007      	beq.n	8007288 <__pow5mult+0x20>
 8007278:	4c25      	ldr	r4, [pc, #148]	; (8007310 <__pow5mult+0xa8>)
 800727a:	3a01      	subs	r2, #1
 800727c:	2300      	movs	r3, #0
 800727e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007282:	f7ff fe9f 	bl	8006fc4 <__multadd>
 8007286:	4607      	mov	r7, r0
 8007288:	10ad      	asrs	r5, r5, #2
 800728a:	d03d      	beq.n	8007308 <__pow5mult+0xa0>
 800728c:	69f4      	ldr	r4, [r6, #28]
 800728e:	b97c      	cbnz	r4, 80072b0 <__pow5mult+0x48>
 8007290:	2010      	movs	r0, #16
 8007292:	f7ff fd81 	bl	8006d98 <malloc>
 8007296:	4602      	mov	r2, r0
 8007298:	61f0      	str	r0, [r6, #28]
 800729a:	b928      	cbnz	r0, 80072a8 <__pow5mult+0x40>
 800729c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80072a0:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <__pow5mult+0xac>)
 80072a2:	481d      	ldr	r0, [pc, #116]	; (8007318 <__pow5mult+0xb0>)
 80072a4:	f000 fa6c 	bl	8007780 <__assert_func>
 80072a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072ac:	6004      	str	r4, [r0, #0]
 80072ae:	60c4      	str	r4, [r0, #12]
 80072b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80072b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072b8:	b94c      	cbnz	r4, 80072ce <__pow5mult+0x66>
 80072ba:	f240 2171 	movw	r1, #625	; 0x271
 80072be:	4630      	mov	r0, r6
 80072c0:	f7ff ff14 	bl	80070ec <__i2b>
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80072cc:	6003      	str	r3, [r0, #0]
 80072ce:	f04f 0900 	mov.w	r9, #0
 80072d2:	07eb      	lsls	r3, r5, #31
 80072d4:	d50a      	bpl.n	80072ec <__pow5mult+0x84>
 80072d6:	4639      	mov	r1, r7
 80072d8:	4622      	mov	r2, r4
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff ff1c 	bl	8007118 <__multiply>
 80072e0:	4680      	mov	r8, r0
 80072e2:	4639      	mov	r1, r7
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff fe4b 	bl	8006f80 <_Bfree>
 80072ea:	4647      	mov	r7, r8
 80072ec:	106d      	asrs	r5, r5, #1
 80072ee:	d00b      	beq.n	8007308 <__pow5mult+0xa0>
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	b938      	cbnz	r0, 8007304 <__pow5mult+0x9c>
 80072f4:	4622      	mov	r2, r4
 80072f6:	4621      	mov	r1, r4
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff ff0d 	bl	8007118 <__multiply>
 80072fe:	6020      	str	r0, [r4, #0]
 8007300:	f8c0 9000 	str.w	r9, [r0]
 8007304:	4604      	mov	r4, r0
 8007306:	e7e4      	b.n	80072d2 <__pow5mult+0x6a>
 8007308:	4638      	mov	r0, r7
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	bf00      	nop
 8007310:	08007ff0 	.word	0x08007ff0
 8007314:	08007e23 	.word	0x08007e23
 8007318:	08007ea3 	.word	0x08007ea3

0800731c <__lshift>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	4607      	mov	r7, r0
 8007324:	4691      	mov	r9, r2
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	6849      	ldr	r1, [r1, #4]
 800732a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007334:	f108 0601 	add.w	r6, r8, #1
 8007338:	42b3      	cmp	r3, r6
 800733a:	db0b      	blt.n	8007354 <__lshift+0x38>
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff fddf 	bl	8006f00 <_Balloc>
 8007342:	4605      	mov	r5, r0
 8007344:	b948      	cbnz	r0, 800735a <__lshift+0x3e>
 8007346:	4602      	mov	r2, r0
 8007348:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800734c:	4b27      	ldr	r3, [pc, #156]	; (80073ec <__lshift+0xd0>)
 800734e:	4828      	ldr	r0, [pc, #160]	; (80073f0 <__lshift+0xd4>)
 8007350:	f000 fa16 	bl	8007780 <__assert_func>
 8007354:	3101      	adds	r1, #1
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	e7ee      	b.n	8007338 <__lshift+0x1c>
 800735a:	2300      	movs	r3, #0
 800735c:	f100 0114 	add.w	r1, r0, #20
 8007360:	f100 0210 	add.w	r2, r0, #16
 8007364:	4618      	mov	r0, r3
 8007366:	4553      	cmp	r3, sl
 8007368:	db33      	blt.n	80073d2 <__lshift+0xb6>
 800736a:	6920      	ldr	r0, [r4, #16]
 800736c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007370:	f104 0314 	add.w	r3, r4, #20
 8007374:	f019 091f 	ands.w	r9, r9, #31
 8007378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800737c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007380:	d02b      	beq.n	80073da <__lshift+0xbe>
 8007382:	468a      	mov	sl, r1
 8007384:	2200      	movs	r2, #0
 8007386:	f1c9 0e20 	rsb	lr, r9, #32
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	fa00 f009 	lsl.w	r0, r0, r9
 8007390:	4310      	orrs	r0, r2
 8007392:	f84a 0b04 	str.w	r0, [sl], #4
 8007396:	f853 2b04 	ldr.w	r2, [r3], #4
 800739a:	459c      	cmp	ip, r3
 800739c:	fa22 f20e 	lsr.w	r2, r2, lr
 80073a0:	d8f3      	bhi.n	800738a <__lshift+0x6e>
 80073a2:	ebac 0304 	sub.w	r3, ip, r4
 80073a6:	3b15      	subs	r3, #21
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	3304      	adds	r3, #4
 80073ae:	f104 0015 	add.w	r0, r4, #21
 80073b2:	4584      	cmp	ip, r0
 80073b4:	bf38      	it	cc
 80073b6:	2304      	movcc	r3, #4
 80073b8:	50ca      	str	r2, [r1, r3]
 80073ba:	b10a      	cbz	r2, 80073c0 <__lshift+0xa4>
 80073bc:	f108 0602 	add.w	r6, r8, #2
 80073c0:	3e01      	subs	r6, #1
 80073c2:	4638      	mov	r0, r7
 80073c4:	4621      	mov	r1, r4
 80073c6:	612e      	str	r6, [r5, #16]
 80073c8:	f7ff fdda 	bl	8006f80 <_Bfree>
 80073cc:	4628      	mov	r0, r5
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073d6:	3301      	adds	r3, #1
 80073d8:	e7c5      	b.n	8007366 <__lshift+0x4a>
 80073da:	3904      	subs	r1, #4
 80073dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e0:	459c      	cmp	ip, r3
 80073e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80073e6:	d8f9      	bhi.n	80073dc <__lshift+0xc0>
 80073e8:	e7ea      	b.n	80073c0 <__lshift+0xa4>
 80073ea:	bf00      	nop
 80073ec:	08007e92 	.word	0x08007e92
 80073f0:	08007ea3 	.word	0x08007ea3

080073f4 <__mcmp>:
 80073f4:	4603      	mov	r3, r0
 80073f6:	690a      	ldr	r2, [r1, #16]
 80073f8:	6900      	ldr	r0, [r0, #16]
 80073fa:	b530      	push	{r4, r5, lr}
 80073fc:	1a80      	subs	r0, r0, r2
 80073fe:	d10d      	bne.n	800741c <__mcmp+0x28>
 8007400:	3314      	adds	r3, #20
 8007402:	3114      	adds	r1, #20
 8007404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800740c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007414:	4295      	cmp	r5, r2
 8007416:	d002      	beq.n	800741e <__mcmp+0x2a>
 8007418:	d304      	bcc.n	8007424 <__mcmp+0x30>
 800741a:	2001      	movs	r0, #1
 800741c:	bd30      	pop	{r4, r5, pc}
 800741e:	42a3      	cmp	r3, r4
 8007420:	d3f4      	bcc.n	800740c <__mcmp+0x18>
 8007422:	e7fb      	b.n	800741c <__mcmp+0x28>
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	e7f8      	b.n	800741c <__mcmp+0x28>
	...

0800742c <__mdiff>:
 800742c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	460d      	mov	r5, r1
 8007432:	4607      	mov	r7, r0
 8007434:	4611      	mov	r1, r2
 8007436:	4628      	mov	r0, r5
 8007438:	4614      	mov	r4, r2
 800743a:	f7ff ffdb 	bl	80073f4 <__mcmp>
 800743e:	1e06      	subs	r6, r0, #0
 8007440:	d111      	bne.n	8007466 <__mdiff+0x3a>
 8007442:	4631      	mov	r1, r6
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff fd5b 	bl	8006f00 <_Balloc>
 800744a:	4602      	mov	r2, r0
 800744c:	b928      	cbnz	r0, 800745a <__mdiff+0x2e>
 800744e:	f240 2137 	movw	r1, #567	; 0x237
 8007452:	4b3a      	ldr	r3, [pc, #232]	; (800753c <__mdiff+0x110>)
 8007454:	483a      	ldr	r0, [pc, #232]	; (8007540 <__mdiff+0x114>)
 8007456:	f000 f993 	bl	8007780 <__assert_func>
 800745a:	2301      	movs	r3, #1
 800745c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007460:	4610      	mov	r0, r2
 8007462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	bfa4      	itt	ge
 8007468:	4623      	movge	r3, r4
 800746a:	462c      	movge	r4, r5
 800746c:	4638      	mov	r0, r7
 800746e:	6861      	ldr	r1, [r4, #4]
 8007470:	bfa6      	itte	ge
 8007472:	461d      	movge	r5, r3
 8007474:	2600      	movge	r6, #0
 8007476:	2601      	movlt	r6, #1
 8007478:	f7ff fd42 	bl	8006f00 <_Balloc>
 800747c:	4602      	mov	r2, r0
 800747e:	b918      	cbnz	r0, 8007488 <__mdiff+0x5c>
 8007480:	f240 2145 	movw	r1, #581	; 0x245
 8007484:	4b2d      	ldr	r3, [pc, #180]	; (800753c <__mdiff+0x110>)
 8007486:	e7e5      	b.n	8007454 <__mdiff+0x28>
 8007488:	f102 0814 	add.w	r8, r2, #20
 800748c:	46c2      	mov	sl, r8
 800748e:	f04f 0c00 	mov.w	ip, #0
 8007492:	6927      	ldr	r7, [r4, #16]
 8007494:	60c6      	str	r6, [r0, #12]
 8007496:	692e      	ldr	r6, [r5, #16]
 8007498:	f104 0014 	add.w	r0, r4, #20
 800749c:	f105 0914 	add.w	r9, r5, #20
 80074a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80074a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074a8:	3410      	adds	r4, #16
 80074aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80074ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80074b2:	fa1f f18b 	uxth.w	r1, fp
 80074b6:	4461      	add	r1, ip
 80074b8:	fa1f fc83 	uxth.w	ip, r3
 80074bc:	0c1b      	lsrs	r3, r3, #16
 80074be:	eba1 010c 	sub.w	r1, r1, ip
 80074c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074ca:	b289      	uxth	r1, r1
 80074cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80074d0:	454e      	cmp	r6, r9
 80074d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074d6:	f84a 1b04 	str.w	r1, [sl], #4
 80074da:	d8e6      	bhi.n	80074aa <__mdiff+0x7e>
 80074dc:	1b73      	subs	r3, r6, r5
 80074de:	3b15      	subs	r3, #21
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	3515      	adds	r5, #21
 80074e6:	3304      	adds	r3, #4
 80074e8:	42ae      	cmp	r6, r5
 80074ea:	bf38      	it	cc
 80074ec:	2304      	movcc	r3, #4
 80074ee:	4418      	add	r0, r3
 80074f0:	4443      	add	r3, r8
 80074f2:	461e      	mov	r6, r3
 80074f4:	4605      	mov	r5, r0
 80074f6:	4575      	cmp	r5, lr
 80074f8:	d30e      	bcc.n	8007518 <__mdiff+0xec>
 80074fa:	f10e 0103 	add.w	r1, lr, #3
 80074fe:	1a09      	subs	r1, r1, r0
 8007500:	f021 0103 	bic.w	r1, r1, #3
 8007504:	3803      	subs	r0, #3
 8007506:	4586      	cmp	lr, r0
 8007508:	bf38      	it	cc
 800750a:	2100      	movcc	r1, #0
 800750c:	440b      	add	r3, r1
 800750e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007512:	b189      	cbz	r1, 8007538 <__mdiff+0x10c>
 8007514:	6117      	str	r7, [r2, #16]
 8007516:	e7a3      	b.n	8007460 <__mdiff+0x34>
 8007518:	f855 8b04 	ldr.w	r8, [r5], #4
 800751c:	fa1f f188 	uxth.w	r1, r8
 8007520:	4461      	add	r1, ip
 8007522:	140c      	asrs	r4, r1, #16
 8007524:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007528:	b289      	uxth	r1, r1
 800752a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800752e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007532:	f846 1b04 	str.w	r1, [r6], #4
 8007536:	e7de      	b.n	80074f6 <__mdiff+0xca>
 8007538:	3f01      	subs	r7, #1
 800753a:	e7e8      	b.n	800750e <__mdiff+0xe2>
 800753c:	08007e92 	.word	0x08007e92
 8007540:	08007ea3 	.word	0x08007ea3

08007544 <__d2b>:
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007546:	2101      	movs	r1, #1
 8007548:	4617      	mov	r7, r2
 800754a:	461c      	mov	r4, r3
 800754c:	9e08      	ldr	r6, [sp, #32]
 800754e:	f7ff fcd7 	bl	8006f00 <_Balloc>
 8007552:	4605      	mov	r5, r0
 8007554:	b930      	cbnz	r0, 8007564 <__d2b+0x20>
 8007556:	4602      	mov	r2, r0
 8007558:	f240 310f 	movw	r1, #783	; 0x30f
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <__d2b+0xa4>)
 800755e:	4823      	ldr	r0, [pc, #140]	; (80075ec <__d2b+0xa8>)
 8007560:	f000 f90e 	bl	8007780 <__assert_func>
 8007564:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007568:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800756c:	bb24      	cbnz	r4, 80075b8 <__d2b+0x74>
 800756e:	2f00      	cmp	r7, #0
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	d026      	beq.n	80075c2 <__d2b+0x7e>
 8007574:	4668      	mov	r0, sp
 8007576:	9700      	str	r7, [sp, #0]
 8007578:	f7ff fd8a 	bl	8007090 <__lo0bits>
 800757c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007580:	b1e8      	cbz	r0, 80075be <__d2b+0x7a>
 8007582:	f1c0 0320 	rsb	r3, r0, #32
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	430b      	orrs	r3, r1
 800758c:	40c2      	lsrs	r2, r0
 800758e:	616b      	str	r3, [r5, #20]
 8007590:	9201      	str	r2, [sp, #4]
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2102      	movne	r1, #2
 800759a:	2101      	moveq	r1, #1
 800759c:	61ab      	str	r3, [r5, #24]
 800759e:	6129      	str	r1, [r5, #16]
 80075a0:	b1bc      	cbz	r4, 80075d2 <__d2b+0x8e>
 80075a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80075a6:	4404      	add	r4, r0
 80075a8:	6034      	str	r4, [r6, #0]
 80075aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	6018      	str	r0, [r3, #0]
 80075b2:	4628      	mov	r0, r5
 80075b4:	b003      	add	sp, #12
 80075b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075bc:	e7d7      	b.n	800756e <__d2b+0x2a>
 80075be:	6169      	str	r1, [r5, #20]
 80075c0:	e7e7      	b.n	8007592 <__d2b+0x4e>
 80075c2:	a801      	add	r0, sp, #4
 80075c4:	f7ff fd64 	bl	8007090 <__lo0bits>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	2101      	movs	r1, #1
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	3020      	adds	r0, #32
 80075d0:	e7e5      	b.n	800759e <__d2b+0x5a>
 80075d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80075da:	6030      	str	r0, [r6, #0]
 80075dc:	6918      	ldr	r0, [r3, #16]
 80075de:	f7ff fd37 	bl	8007050 <__hi0bits>
 80075e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80075e6:	e7e2      	b.n	80075ae <__d2b+0x6a>
 80075e8:	08007e92 	.word	0x08007e92
 80075ec:	08007ea3 	.word	0x08007ea3

080075f0 <__sflush_r>:
 80075f0:	898a      	ldrh	r2, [r1, #12]
 80075f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f4:	4605      	mov	r5, r0
 80075f6:	0710      	lsls	r0, r2, #28
 80075f8:	460c      	mov	r4, r1
 80075fa:	d457      	bmi.n	80076ac <__sflush_r+0xbc>
 80075fc:	684b      	ldr	r3, [r1, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dc04      	bgt.n	800760c <__sflush_r+0x1c>
 8007602:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc01      	bgt.n	800760c <__sflush_r+0x1c>
 8007608:	2000      	movs	r0, #0
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760e:	2e00      	cmp	r6, #0
 8007610:	d0fa      	beq.n	8007608 <__sflush_r+0x18>
 8007612:	2300      	movs	r3, #0
 8007614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007618:	682f      	ldr	r7, [r5, #0]
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	d032      	beq.n	8007686 <__sflush_r+0x96>
 8007620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	075a      	lsls	r2, r3, #29
 8007626:	d505      	bpl.n	8007634 <__sflush_r+0x44>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	1ac0      	subs	r0, r0, r3
 800762c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800762e:	b10b      	cbz	r3, 8007634 <__sflush_r+0x44>
 8007630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	2300      	movs	r3, #0
 8007636:	4602      	mov	r2, r0
 8007638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763a:	4628      	mov	r0, r5
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x64>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb4>
 800764c:	4a28      	ldr	r2, [pc, #160]	; (80076f0 <__sflush_r+0x100>)
 800764e:	410a      	asrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d427      	bmi.n	80076a4 <__sflush_r+0xb4>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x7a>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x78>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x7a>
 8007668:	6560      	str	r0, [r4, #84]	; 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	2900      	cmp	r1, #0
 8007670:	d0ca      	beq.n	8007608 <__sflush_r+0x18>
 8007672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007676:	4299      	cmp	r1, r3
 8007678:	d002      	beq.n	8007680 <__sflush_r+0x90>
 800767a:	4628      	mov	r0, r5
 800767c:	f7ff fb44 	bl	8006d08 <_free_r>
 8007680:	2000      	movs	r0, #0
 8007682:	6360      	str	r0, [r4, #52]	; 0x34
 8007684:	e7c1      	b.n	800760a <__sflush_r+0x1a>
 8007686:	2301      	movs	r3, #1
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	1c41      	adds	r1, r0, #1
 800768e:	d1c8      	bne.n	8007622 <__sflush_r+0x32>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <__sflush_r+0x32>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xae>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0xb2>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	e7b2      	b.n	8007608 <__sflush_r+0x18>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	e7ae      	b.n	800760a <__sflush_r+0x1a>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0aa      	beq.n	8007608 <__sflush_r+0x18>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	bf18      	it	ne
 80076b6:	2300      	movne	r3, #0
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	1bf6      	subs	r6, r6, r7
 80076c0:	600f      	str	r7, [r1, #0]
 80076c2:	608b      	str	r3, [r1, #8]
 80076c4:	2e00      	cmp	r6, #0
 80076c6:	dd9f      	ble.n	8007608 <__sflush_r+0x18>
 80076c8:	4633      	mov	r3, r6
 80076ca:	463a      	mov	r2, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	6a21      	ldr	r1, [r4, #32]
 80076d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076d4:	47e0      	blx	ip
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc06      	bgt.n	80076e8 <__sflush_r+0xf8>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e790      	b.n	800760a <__sflush_r+0x1a>
 80076e8:	4407      	add	r7, r0
 80076ea:	1a36      	subs	r6, r6, r0
 80076ec:	e7ea      	b.n	80076c4 <__sflush_r+0xd4>
 80076ee:	bf00      	nop
 80076f0:	dfbffffe 	.word	0xdfbffffe

080076f4 <_fflush_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	690b      	ldr	r3, [r1, #16]
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	b913      	cbnz	r3, 8007704 <_fflush_r+0x10>
 80076fe:	2500      	movs	r5, #0
 8007700:	4628      	mov	r0, r5
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	b118      	cbz	r0, 800770e <_fflush_r+0x1a>
 8007706:	6a03      	ldr	r3, [r0, #32]
 8007708:	b90b      	cbnz	r3, 800770e <_fflush_r+0x1a>
 800770a:	f7fe fb87 	bl	8005e1c <__sinit>
 800770e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f3      	beq.n	80076fe <_fflush_r+0xa>
 8007716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007718:	07d0      	lsls	r0, r2, #31
 800771a:	d404      	bmi.n	8007726 <_fflush_r+0x32>
 800771c:	0599      	lsls	r1, r3, #22
 800771e:	d402      	bmi.n	8007726 <_fflush_r+0x32>
 8007720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007722:	f7fe fc72 	bl	800600a <__retarget_lock_acquire_recursive>
 8007726:	4628      	mov	r0, r5
 8007728:	4621      	mov	r1, r4
 800772a:	f7ff ff61 	bl	80075f0 <__sflush_r>
 800772e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007730:	4605      	mov	r5, r0
 8007732:	07da      	lsls	r2, r3, #31
 8007734:	d4e4      	bmi.n	8007700 <_fflush_r+0xc>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	d4e1      	bmi.n	8007700 <_fflush_r+0xc>
 800773c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800773e:	f7fe fc65 	bl	800600c <__retarget_lock_release_recursive>
 8007742:	e7dd      	b.n	8007700 <_fflush_r+0xc>

08007744 <_sbrk_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	2300      	movs	r3, #0
 8007748:	4d05      	ldr	r5, [pc, #20]	; (8007760 <_sbrk_r+0x1c>)
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	f7fa f998 	bl	8001a84 <_sbrk>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_sbrk_r+0x1a>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_sbrk_r+0x1a>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	200004b0 	.word	0x200004b0

08007764 <memcpy>:
 8007764:	440a      	add	r2, r1
 8007766:	4291      	cmp	r1, r2
 8007768:	f100 33ff 	add.w	r3, r0, #4294967295
 800776c:	d100      	bne.n	8007770 <memcpy+0xc>
 800776e:	4770      	bx	lr
 8007770:	b510      	push	{r4, lr}
 8007772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007776:	4291      	cmp	r1, r2
 8007778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800777c:	d1f9      	bne.n	8007772 <memcpy+0xe>
 800777e:	bd10      	pop	{r4, pc}

08007780 <__assert_func>:
 8007780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007782:	4614      	mov	r4, r2
 8007784:	461a      	mov	r2, r3
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <__assert_func+0x2c>)
 8007788:	4605      	mov	r5, r0
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68d8      	ldr	r0, [r3, #12]
 800778e:	b14c      	cbz	r4, 80077a4 <__assert_func+0x24>
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <__assert_func+0x30>)
 8007792:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007796:	9100      	str	r1, [sp, #0]
 8007798:	462b      	mov	r3, r5
 800779a:	4906      	ldr	r1, [pc, #24]	; (80077b4 <__assert_func+0x34>)
 800779c:	f000 f842 	bl	8007824 <fiprintf>
 80077a0:	f000 f852 	bl	8007848 <abort>
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <__assert_func+0x38>)
 80077a6:	461c      	mov	r4, r3
 80077a8:	e7f3      	b.n	8007792 <__assert_func+0x12>
 80077aa:	bf00      	nop
 80077ac:	20000078 	.word	0x20000078
 80077b0:	08008006 	.word	0x08008006
 80077b4:	08008013 	.word	0x08008013
 80077b8:	08008041 	.word	0x08008041

080077bc <_calloc_r>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	fba1 5402 	umull	r5, r4, r1, r2
 80077c2:	b934      	cbnz	r4, 80077d2 <_calloc_r+0x16>
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7ff fb0f 	bl	8006de8 <_malloc_r>
 80077ca:	4606      	mov	r6, r0
 80077cc:	b928      	cbnz	r0, 80077da <_calloc_r+0x1e>
 80077ce:	4630      	mov	r0, r6
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	220c      	movs	r2, #12
 80077d4:	2600      	movs	r6, #0
 80077d6:	6002      	str	r2, [r0, #0]
 80077d8:	e7f9      	b.n	80077ce <_calloc_r+0x12>
 80077da:	462a      	mov	r2, r5
 80077dc:	4621      	mov	r1, r4
 80077de:	f7fe fb96 	bl	8005f0e <memset>
 80077e2:	e7f4      	b.n	80077ce <_calloc_r+0x12>

080077e4 <__ascii_mbtowc>:
 80077e4:	b082      	sub	sp, #8
 80077e6:	b901      	cbnz	r1, 80077ea <__ascii_mbtowc+0x6>
 80077e8:	a901      	add	r1, sp, #4
 80077ea:	b142      	cbz	r2, 80077fe <__ascii_mbtowc+0x1a>
 80077ec:	b14b      	cbz	r3, 8007802 <__ascii_mbtowc+0x1e>
 80077ee:	7813      	ldrb	r3, [r2, #0]
 80077f0:	600b      	str	r3, [r1, #0]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	1e10      	subs	r0, r2, #0
 80077f6:	bf18      	it	ne
 80077f8:	2001      	movne	r0, #1
 80077fa:	b002      	add	sp, #8
 80077fc:	4770      	bx	lr
 80077fe:	4610      	mov	r0, r2
 8007800:	e7fb      	b.n	80077fa <__ascii_mbtowc+0x16>
 8007802:	f06f 0001 	mvn.w	r0, #1
 8007806:	e7f8      	b.n	80077fa <__ascii_mbtowc+0x16>

08007808 <__ascii_wctomb>:
 8007808:	4603      	mov	r3, r0
 800780a:	4608      	mov	r0, r1
 800780c:	b141      	cbz	r1, 8007820 <__ascii_wctomb+0x18>
 800780e:	2aff      	cmp	r2, #255	; 0xff
 8007810:	d904      	bls.n	800781c <__ascii_wctomb+0x14>
 8007812:	228a      	movs	r2, #138	; 0x8a
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	4770      	bx	lr
 800781c:	2001      	movs	r0, #1
 800781e:	700a      	strb	r2, [r1, #0]
 8007820:	4770      	bx	lr
	...

08007824 <fiprintf>:
 8007824:	b40e      	push	{r1, r2, r3}
 8007826:	b503      	push	{r0, r1, lr}
 8007828:	4601      	mov	r1, r0
 800782a:	ab03      	add	r3, sp, #12
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <fiprintf+0x20>)
 800782e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f000 f835 	bl	80078a4 <_vfiprintf_r>
 800783a:	b002      	add	sp, #8
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	b003      	add	sp, #12
 8007842:	4770      	bx	lr
 8007844:	20000078 	.word	0x20000078

08007848 <abort>:
 8007848:	2006      	movs	r0, #6
 800784a:	b508      	push	{r3, lr}
 800784c:	f000 fa02 	bl	8007c54 <raise>
 8007850:	2001      	movs	r0, #1
 8007852:	f7fa f8a4 	bl	800199e <_exit>

08007856 <__sfputc_r>:
 8007856:	6893      	ldr	r3, [r2, #8]
 8007858:	b410      	push	{r4}
 800785a:	3b01      	subs	r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	6093      	str	r3, [r2, #8]
 8007860:	da07      	bge.n	8007872 <__sfputc_r+0x1c>
 8007862:	6994      	ldr	r4, [r2, #24]
 8007864:	42a3      	cmp	r3, r4
 8007866:	db01      	blt.n	800786c <__sfputc_r+0x16>
 8007868:	290a      	cmp	r1, #10
 800786a:	d102      	bne.n	8007872 <__sfputc_r+0x1c>
 800786c:	bc10      	pop	{r4}
 800786e:	f000 b933 	b.w	8007ad8 <__swbuf_r>
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	1c58      	adds	r0, r3, #1
 8007876:	6010      	str	r0, [r2, #0]
 8007878:	7019      	strb	r1, [r3, #0]
 800787a:	4608      	mov	r0, r1
 800787c:	bc10      	pop	{r4}
 800787e:	4770      	bx	lr

08007880 <__sfputs_r>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	4606      	mov	r6, r0
 8007884:	460f      	mov	r7, r1
 8007886:	4614      	mov	r4, r2
 8007888:	18d5      	adds	r5, r2, r3
 800788a:	42ac      	cmp	r4, r5
 800788c:	d101      	bne.n	8007892 <__sfputs_r+0x12>
 800788e:	2000      	movs	r0, #0
 8007890:	e007      	b.n	80078a2 <__sfputs_r+0x22>
 8007892:	463a      	mov	r2, r7
 8007894:	4630      	mov	r0, r6
 8007896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789a:	f7ff ffdc 	bl	8007856 <__sfputc_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	d1f3      	bne.n	800788a <__sfputs_r+0xa>
 80078a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078a4 <_vfiprintf_r>:
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	460d      	mov	r5, r1
 80078aa:	4614      	mov	r4, r2
 80078ac:	4698      	mov	r8, r3
 80078ae:	4606      	mov	r6, r0
 80078b0:	b09d      	sub	sp, #116	; 0x74
 80078b2:	b118      	cbz	r0, 80078bc <_vfiprintf_r+0x18>
 80078b4:	6a03      	ldr	r3, [r0, #32]
 80078b6:	b90b      	cbnz	r3, 80078bc <_vfiprintf_r+0x18>
 80078b8:	f7fe fab0 	bl	8005e1c <__sinit>
 80078bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_vfiprintf_r+0x2a>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	059a      	lsls	r2, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_vfiprintf_r+0x2a>
 80078c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ca:	f7fe fb9e 	bl	800600a <__retarget_lock_acquire_recursive>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	071b      	lsls	r3, r3, #28
 80078d2:	d501      	bpl.n	80078d8 <_vfiprintf_r+0x34>
 80078d4:	692b      	ldr	r3, [r5, #16]
 80078d6:	b99b      	cbnz	r3, 8007900 <_vfiprintf_r+0x5c>
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 f93a 	bl	8007b54 <__swsetup_r>
 80078e0:	b170      	cbz	r0, 8007900 <_vfiprintf_r+0x5c>
 80078e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078e4:	07dc      	lsls	r4, r3, #31
 80078e6:	d504      	bpl.n	80078f2 <_vfiprintf_r+0x4e>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b01d      	add	sp, #116	; 0x74
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	0598      	lsls	r0, r3, #22
 80078f6:	d4f7      	bmi.n	80078e8 <_vfiprintf_r+0x44>
 80078f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078fa:	f7fe fb87 	bl	800600c <__retarget_lock_release_recursive>
 80078fe:	e7f3      	b.n	80078e8 <_vfiprintf_r+0x44>
 8007900:	2300      	movs	r3, #0
 8007902:	9309      	str	r3, [sp, #36]	; 0x24
 8007904:	2320      	movs	r3, #32
 8007906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800790a:	2330      	movs	r3, #48	; 0x30
 800790c:	f04f 0901 	mov.w	r9, #1
 8007910:	f8cd 800c 	str.w	r8, [sp, #12]
 8007914:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007ac4 <_vfiprintf_r+0x220>
 8007918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800791c:	4623      	mov	r3, r4
 800791e:	469a      	mov	sl, r3
 8007920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007924:	b10a      	cbz	r2, 800792a <_vfiprintf_r+0x86>
 8007926:	2a25      	cmp	r2, #37	; 0x25
 8007928:	d1f9      	bne.n	800791e <_vfiprintf_r+0x7a>
 800792a:	ebba 0b04 	subs.w	fp, sl, r4
 800792e:	d00b      	beq.n	8007948 <_vfiprintf_r+0xa4>
 8007930:	465b      	mov	r3, fp
 8007932:	4622      	mov	r2, r4
 8007934:	4629      	mov	r1, r5
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ffa2 	bl	8007880 <__sfputs_r>
 800793c:	3001      	adds	r0, #1
 800793e:	f000 80a9 	beq.w	8007a94 <_vfiprintf_r+0x1f0>
 8007942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007944:	445a      	add	r2, fp
 8007946:	9209      	str	r2, [sp, #36]	; 0x24
 8007948:	f89a 3000 	ldrb.w	r3, [sl]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80a1 	beq.w	8007a94 <_vfiprintf_r+0x1f0>
 8007952:	2300      	movs	r3, #0
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800795c:	f10a 0a01 	add.w	sl, sl, #1
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	9307      	str	r3, [sp, #28]
 8007964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007968:	931a      	str	r3, [sp, #104]	; 0x68
 800796a:	4654      	mov	r4, sl
 800796c:	2205      	movs	r2, #5
 800796e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007972:	4854      	ldr	r0, [pc, #336]	; (8007ac4 <_vfiprintf_r+0x220>)
 8007974:	f7fe fb4b 	bl	800600e <memchr>
 8007978:	9a04      	ldr	r2, [sp, #16]
 800797a:	b9d8      	cbnz	r0, 80079b4 <_vfiprintf_r+0x110>
 800797c:	06d1      	lsls	r1, r2, #27
 800797e:	bf44      	itt	mi
 8007980:	2320      	movmi	r3, #32
 8007982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007986:	0713      	lsls	r3, r2, #28
 8007988:	bf44      	itt	mi
 800798a:	232b      	movmi	r3, #43	; 0x2b
 800798c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007990:	f89a 3000 	ldrb.w	r3, [sl]
 8007994:	2b2a      	cmp	r3, #42	; 0x2a
 8007996:	d015      	beq.n	80079c4 <_vfiprintf_r+0x120>
 8007998:	4654      	mov	r4, sl
 800799a:	2000      	movs	r0, #0
 800799c:	f04f 0c0a 	mov.w	ip, #10
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	4621      	mov	r1, r4
 80079a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a8:	3b30      	subs	r3, #48	; 0x30
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d94d      	bls.n	8007a4a <_vfiprintf_r+0x1a6>
 80079ae:	b1b0      	cbz	r0, 80079de <_vfiprintf_r+0x13a>
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	e014      	b.n	80079de <_vfiprintf_r+0x13a>
 80079b4:	eba0 0308 	sub.w	r3, r0, r8
 80079b8:	fa09 f303 	lsl.w	r3, r9, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	46a2      	mov	sl, r4
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	e7d2      	b.n	800796a <_vfiprintf_r+0xc6>
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	1d19      	adds	r1, r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	9103      	str	r1, [sp, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfbb      	ittet	lt
 80079d0:	425b      	neglt	r3, r3
 80079d2:	f042 0202 	orrlt.w	r2, r2, #2
 80079d6:	9307      	strge	r3, [sp, #28]
 80079d8:	9307      	strlt	r3, [sp, #28]
 80079da:	bfb8      	it	lt
 80079dc:	9204      	strlt	r2, [sp, #16]
 80079de:	7823      	ldrb	r3, [r4, #0]
 80079e0:	2b2e      	cmp	r3, #46	; 0x2e
 80079e2:	d10c      	bne.n	80079fe <_vfiprintf_r+0x15a>
 80079e4:	7863      	ldrb	r3, [r4, #1]
 80079e6:	2b2a      	cmp	r3, #42	; 0x2a
 80079e8:	d134      	bne.n	8007a54 <_vfiprintf_r+0x1b0>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	3402      	adds	r4, #2
 80079ee:	1d1a      	adds	r2, r3, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	9203      	str	r2, [sp, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfb8      	it	lt
 80079f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079fc:	9305      	str	r3, [sp, #20]
 80079fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ac8 <_vfiprintf_r+0x224>
 8007a02:	2203      	movs	r2, #3
 8007a04:	4650      	mov	r0, sl
 8007a06:	7821      	ldrb	r1, [r4, #0]
 8007a08:	f7fe fb01 	bl	800600e <memchr>
 8007a0c:	b138      	cbz	r0, 8007a1e <_vfiprintf_r+0x17a>
 8007a0e:	2240      	movs	r2, #64	; 0x40
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	eba0 000a 	sub.w	r0, r0, sl
 8007a16:	4082      	lsls	r2, r0
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	3401      	adds	r4, #1
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a22:	2206      	movs	r2, #6
 8007a24:	4829      	ldr	r0, [pc, #164]	; (8007acc <_vfiprintf_r+0x228>)
 8007a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a2a:	f7fe faf0 	bl	800600e <memchr>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d03f      	beq.n	8007ab2 <_vfiprintf_r+0x20e>
 8007a32:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <_vfiprintf_r+0x22c>)
 8007a34:	bb1b      	cbnz	r3, 8007a7e <_vfiprintf_r+0x1da>
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	3307      	adds	r3, #7
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	3308      	adds	r3, #8
 8007a40:	9303      	str	r3, [sp, #12]
 8007a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a44:	443b      	add	r3, r7
 8007a46:	9309      	str	r3, [sp, #36]	; 0x24
 8007a48:	e768      	b.n	800791c <_vfiprintf_r+0x78>
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a52:	e7a6      	b.n	80079a2 <_vfiprintf_r+0xfe>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f04f 0c0a 	mov.w	ip, #10
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	3401      	adds	r4, #1
 8007a5e:	9305      	str	r3, [sp, #20]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a66:	3a30      	subs	r2, #48	; 0x30
 8007a68:	2a09      	cmp	r2, #9
 8007a6a:	d903      	bls.n	8007a74 <_vfiprintf_r+0x1d0>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0c6      	beq.n	80079fe <_vfiprintf_r+0x15a>
 8007a70:	9105      	str	r1, [sp, #20]
 8007a72:	e7c4      	b.n	80079fe <_vfiprintf_r+0x15a>
 8007a74:	4604      	mov	r4, r0
 8007a76:	2301      	movs	r3, #1
 8007a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a7c:	e7f0      	b.n	8007a60 <_vfiprintf_r+0x1bc>
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4630      	mov	r0, r6
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <_vfiprintf_r+0x230>)
 8007a88:	a904      	add	r1, sp, #16
 8007a8a:	f7fd fd79 	bl	8005580 <_printf_float>
 8007a8e:	4607      	mov	r7, r0
 8007a90:	1c78      	adds	r0, r7, #1
 8007a92:	d1d6      	bne.n	8007a42 <_vfiprintf_r+0x19e>
 8007a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_vfiprintf_r+0x202>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_vfiprintf_r+0x202>
 8007aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa2:	f7fe fab3 	bl	800600c <__retarget_lock_release_recursive>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	065b      	lsls	r3, r3, #25
 8007aaa:	f53f af1d 	bmi.w	80078e8 <_vfiprintf_r+0x44>
 8007aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab0:	e71c      	b.n	80078ec <_vfiprintf_r+0x48>
 8007ab2:	ab03      	add	r3, sp, #12
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <_vfiprintf_r+0x230>)
 8007abc:	a904      	add	r1, sp, #16
 8007abe:	f7fd ffff 	bl	8005ac0 <_printf_i>
 8007ac2:	e7e4      	b.n	8007a8e <_vfiprintf_r+0x1ea>
 8007ac4:	08008143 	.word	0x08008143
 8007ac8:	08008149 	.word	0x08008149
 8007acc:	0800814d 	.word	0x0800814d
 8007ad0:	08005581 	.word	0x08005581
 8007ad4:	08007881 	.word	0x08007881

08007ad8 <__swbuf_r>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	460e      	mov	r6, r1
 8007adc:	4614      	mov	r4, r2
 8007ade:	4605      	mov	r5, r0
 8007ae0:	b118      	cbz	r0, 8007aea <__swbuf_r+0x12>
 8007ae2:	6a03      	ldr	r3, [r0, #32]
 8007ae4:	b90b      	cbnz	r3, 8007aea <__swbuf_r+0x12>
 8007ae6:	f7fe f999 	bl	8005e1c <__sinit>
 8007aea:	69a3      	ldr	r3, [r4, #24]
 8007aec:	60a3      	str	r3, [r4, #8]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	071a      	lsls	r2, r3, #28
 8007af2:	d525      	bpl.n	8007b40 <__swbuf_r+0x68>
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	b31b      	cbz	r3, 8007b40 <__swbuf_r+0x68>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	6922      	ldr	r2, [r4, #16]
 8007afc:	b2f6      	uxtb	r6, r6
 8007afe:	1a98      	subs	r0, r3, r2
 8007b00:	6963      	ldr	r3, [r4, #20]
 8007b02:	4637      	mov	r7, r6
 8007b04:	4283      	cmp	r3, r0
 8007b06:	dc04      	bgt.n	8007b12 <__swbuf_r+0x3a>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f7ff fdf2 	bl	80076f4 <_fflush_r>
 8007b10:	b9e0      	cbnz	r0, 8007b4c <__swbuf_r+0x74>
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	60a3      	str	r3, [r4, #8]
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	6022      	str	r2, [r4, #0]
 8007b1e:	701e      	strb	r6, [r3, #0]
 8007b20:	6962      	ldr	r2, [r4, #20]
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d004      	beq.n	8007b32 <__swbuf_r+0x5a>
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	07db      	lsls	r3, r3, #31
 8007b2c:	d506      	bpl.n	8007b3c <__swbuf_r+0x64>
 8007b2e:	2e0a      	cmp	r6, #10
 8007b30:	d104      	bne.n	8007b3c <__swbuf_r+0x64>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fddd 	bl	80076f4 <_fflush_r>
 8007b3a:	b938      	cbnz	r0, 8007b4c <__swbuf_r+0x74>
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b40:	4621      	mov	r1, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 f806 	bl	8007b54 <__swsetup_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d0d5      	beq.n	8007af8 <__swbuf_r+0x20>
 8007b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b50:	e7f4      	b.n	8007b3c <__swbuf_r+0x64>
	...

08007b54 <__swsetup_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4b2a      	ldr	r3, [pc, #168]	; (8007c00 <__swsetup_r+0xac>)
 8007b58:	4605      	mov	r5, r0
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	b118      	cbz	r0, 8007b68 <__swsetup_r+0x14>
 8007b60:	6a03      	ldr	r3, [r0, #32]
 8007b62:	b90b      	cbnz	r3, 8007b68 <__swsetup_r+0x14>
 8007b64:	f7fe f95a 	bl	8005e1c <__sinit>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b6e:	0718      	lsls	r0, r3, #28
 8007b70:	d422      	bmi.n	8007bb8 <__swsetup_r+0x64>
 8007b72:	06d9      	lsls	r1, r3, #27
 8007b74:	d407      	bmi.n	8007b86 <__swsetup_r+0x32>
 8007b76:	2309      	movs	r3, #9
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	e034      	b.n	8007bf0 <__swsetup_r+0x9c>
 8007b86:	0758      	lsls	r0, r3, #29
 8007b88:	d512      	bpl.n	8007bb0 <__swsetup_r+0x5c>
 8007b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8c:	b141      	cbz	r1, 8007ba0 <__swsetup_r+0x4c>
 8007b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b92:	4299      	cmp	r1, r3
 8007b94:	d002      	beq.n	8007b9c <__swsetup_r+0x48>
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff f8b6 	bl	8006d08 <_free_r>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6363      	str	r3, [r4, #52]	; 0x34
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f043 0308 	orr.w	r3, r3, #8
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b94b      	cbnz	r3, 8007bd0 <__swsetup_r+0x7c>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc6:	d003      	beq.n	8007bd0 <__swsetup_r+0x7c>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f883 	bl	8007cd6 <__smakebuf_r>
 8007bd0:	89a0      	ldrh	r0, [r4, #12]
 8007bd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bd6:	f010 0301 	ands.w	r3, r0, #1
 8007bda:	d00a      	beq.n	8007bf2 <__swsetup_r+0x9e>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	6963      	ldr	r3, [r4, #20]
 8007be2:	425b      	negs	r3, r3
 8007be4:	61a3      	str	r3, [r4, #24]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	b943      	cbnz	r3, 8007bfc <__swsetup_r+0xa8>
 8007bea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bee:	d1c4      	bne.n	8007b7a <__swsetup_r+0x26>
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	0781      	lsls	r1, r0, #30
 8007bf4:	bf58      	it	pl
 8007bf6:	6963      	ldrpl	r3, [r4, #20]
 8007bf8:	60a3      	str	r3, [r4, #8]
 8007bfa:	e7f4      	b.n	8007be6 <__swsetup_r+0x92>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e7f7      	b.n	8007bf0 <__swsetup_r+0x9c>
 8007c00:	20000078 	.word	0x20000078

08007c04 <_raise_r>:
 8007c04:	291f      	cmp	r1, #31
 8007c06:	b538      	push	{r3, r4, r5, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	d904      	bls.n	8007c18 <_raise_r+0x14>
 8007c0e:	2316      	movs	r3, #22
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	f04f 30ff 	mov.w	r0, #4294967295
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c1a:	b112      	cbz	r2, 8007c22 <_raise_r+0x1e>
 8007c1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c20:	b94b      	cbnz	r3, 8007c36 <_raise_r+0x32>
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f830 	bl	8007c88 <_getpid_r>
 8007c28:	462a      	mov	r2, r5
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c32:	f000 b817 	b.w	8007c64 <_kill_r>
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d00a      	beq.n	8007c50 <_raise_r+0x4c>
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	d103      	bne.n	8007c46 <_raise_r+0x42>
 8007c3e:	2316      	movs	r3, #22
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	2001      	movs	r0, #1
 8007c44:	e7e7      	b.n	8007c16 <_raise_r+0x12>
 8007c46:	2400      	movs	r4, #0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c4e:	4798      	blx	r3
 8007c50:	2000      	movs	r0, #0
 8007c52:	e7e0      	b.n	8007c16 <_raise_r+0x12>

08007c54 <raise>:
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <raise+0xc>)
 8007c56:	4601      	mov	r1, r0
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f7ff bfd3 	b.w	8007c04 <_raise_r>
 8007c5e:	bf00      	nop
 8007c60:	20000078 	.word	0x20000078

08007c64 <_kill_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	2300      	movs	r3, #0
 8007c68:	4d06      	ldr	r5, [pc, #24]	; (8007c84 <_kill_r+0x20>)
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	4611      	mov	r1, r2
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	f7f9 fe84 	bl	800197e <_kill>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d102      	bne.n	8007c80 <_kill_r+0x1c>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	b103      	cbz	r3, 8007c80 <_kill_r+0x1c>
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	200004b0 	.word	0x200004b0

08007c88 <_getpid_r>:
 8007c88:	f7f9 be72 	b.w	8001970 <_getpid>

08007c8c <__swhatbuf_r>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	4615      	mov	r5, r2
 8007c96:	2900      	cmp	r1, #0
 8007c98:	461e      	mov	r6, r3
 8007c9a:	b096      	sub	sp, #88	; 0x58
 8007c9c:	da0c      	bge.n	8007cb8 <__swhatbuf_r+0x2c>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ca6:	bf0c      	ite	eq
 8007ca8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cac:	2340      	movne	r3, #64	; 0x40
 8007cae:	2000      	movs	r0, #0
 8007cb0:	6031      	str	r1, [r6, #0]
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	b016      	add	sp, #88	; 0x58
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	466a      	mov	r2, sp
 8007cba:	f000 f849 	bl	8007d50 <_fstat_r>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	dbed      	blt.n	8007c9e <__swhatbuf_r+0x12>
 8007cc2:	9901      	ldr	r1, [sp, #4]
 8007cc4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cc8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ccc:	4259      	negs	r1, r3
 8007cce:	4159      	adcs	r1, r3
 8007cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd4:	e7eb      	b.n	8007cae <__swhatbuf_r+0x22>

08007cd6 <__smakebuf_r>:
 8007cd6:	898b      	ldrh	r3, [r1, #12]
 8007cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cda:	079d      	lsls	r5, r3, #30
 8007cdc:	4606      	mov	r6, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	d507      	bpl.n	8007cf2 <__smakebuf_r+0x1c>
 8007ce2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	2301      	movs	r3, #1
 8007cec:	6163      	str	r3, [r4, #20]
 8007cee:	b002      	add	sp, #8
 8007cf0:	bd70      	pop	{r4, r5, r6, pc}
 8007cf2:	466a      	mov	r2, sp
 8007cf4:	ab01      	add	r3, sp, #4
 8007cf6:	f7ff ffc9 	bl	8007c8c <__swhatbuf_r>
 8007cfa:	9900      	ldr	r1, [sp, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7ff f872 	bl	8006de8 <_malloc_r>
 8007d04:	b948      	cbnz	r0, 8007d1a <__smakebuf_r+0x44>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	059a      	lsls	r2, r3, #22
 8007d0c:	d4ef      	bmi.n	8007cee <__smakebuf_r+0x18>
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	f043 0302 	orr.w	r3, r3, #2
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	e7e3      	b.n	8007ce2 <__smakebuf_r+0xc>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	6020      	str	r0, [r4, #0]
 8007d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	9b00      	ldr	r3, [sp, #0]
 8007d26:	6120      	str	r0, [r4, #16]
 8007d28:	6163      	str	r3, [r4, #20]
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	b15b      	cbz	r3, 8007d46 <__smakebuf_r+0x70>
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d34:	f000 f81e 	bl	8007d74 <_isatty_r>
 8007d38:	b128      	cbz	r0, 8007d46 <__smakebuf_r+0x70>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	431d      	orrs	r5, r3
 8007d4a:	81a5      	strh	r5, [r4, #12]
 8007d4c:	e7cf      	b.n	8007cee <__smakebuf_r+0x18>
	...

08007d50 <_fstat_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	2300      	movs	r3, #0
 8007d54:	4d06      	ldr	r5, [pc, #24]	; (8007d70 <_fstat_r+0x20>)
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	f7f9 fe6c 	bl	8001a3a <_fstat>
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	d102      	bne.n	8007d6c <_fstat_r+0x1c>
 8007d66:	682b      	ldr	r3, [r5, #0]
 8007d68:	b103      	cbz	r3, 8007d6c <_fstat_r+0x1c>
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	200004b0 	.word	0x200004b0

08007d74 <_isatty_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	2300      	movs	r3, #0
 8007d78:	4d05      	ldr	r5, [pc, #20]	; (8007d90 <_isatty_r+0x1c>)
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f9 fe6a 	bl	8001a58 <_isatty>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_isatty_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_isatty_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	200004b0 	.word	0x200004b0

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
